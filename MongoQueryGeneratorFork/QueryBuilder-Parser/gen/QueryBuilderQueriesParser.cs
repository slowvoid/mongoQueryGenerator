//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/GitProjects/mongoQueryGenerator/MongoQueryGeneratorFork/QueryBuilder-Parser/QueryBuilderQueries.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryBuilder.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class QueryBuilderQueriesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, NAME=36, INTEGER=37, VALUE=38, 
		NUMERIC=39, WS=40;
	public const int
		RULE_query = 0, RULE_entity = 1, RULE_simpleEntity = 2, RULE_listOfEntities = 3, 
		RULE_rjoin = 4, RULE_select = 5, RULE_simpleAttribute = 6, RULE_listOfAttributes = 7, 
		RULE_alias = 8, RULE_aggregationFunction = 9, RULE_where = 10, RULE_expressionList = 11, 
		RULE_arithmeticExpression = 12, RULE_otherExpression = 13, RULE_logicalExpression = 14, 
		RULE_groupby = 15, RULE_having = 16, RULE_orderby = 17;
	public static readonly string[] ruleNames = {
		"query", "entity", "simpleEntity", "listOfEntities", "rjoin", "select", 
		"simpleAttribute", "listOfAttributes", "alias", "aggregationFunction", 
		"where", "expressionList", "arithmeticExpression", "otherExpression", 
		"logicalExpression", "groupby", "having", "orderby"
	};

	private static readonly string[] _LiteralNames = {
		null, "'from'", "'select'", "'where'", "'group by'", "'having'", "'order by'", 
		"'('", "')'", "','", "'rjoin'", "'.'", "'avg'", "'max'", "'min'", "'sum'", 
		"'count'", "'(*)'", "'='", "'<>'", "'>='", "'<='", "'>'", "'<'", "'like'", 
		"'is not null'", "'is null'", "'between'", "'and'", "'not in'", "'in'", 
		"'not exists'", "'exists'", "'or'", "'asc'", "'desc'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NAME", "INTEGER", "VALUE", "NUMERIC", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryBuilderQueries.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryBuilderQueriesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryBuilderQueriesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryBuilderQueriesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class QueryContext : ParserRuleContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public GroupbyContext groupby() {
			return GetRuleContext<GroupbyContext>(0);
		}
		public HavingContext having() {
			return GetRuleContext<HavingContext>(0);
		}
		public OrderbyContext orderby() {
			return GetRuleContext<OrderbyContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(T__0);
			State = 37; entity(0);
			State = 38; Match(T__1);
			State = 39; select();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 40; Match(T__2);
				State = 41; where();
				}
			}

			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 44; Match(T__3);
				State = 45; groupby();
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 48; Match(T__4);
				State = 49; having();
				}
			}

			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 52; Match(T__5);
				State = 53; orderby();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public SimpleEntityContext simpleEntity() {
			return GetRuleContext<SimpleEntityContext>(0);
		}
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public RjoinContext rjoin() {
			return GetRuleContext<RjoinContext>(0);
		}
		public ListOfEntitiesContext listOfEntities() {
			return GetRuleContext<ListOfEntitiesContext>(0);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		return entity(0);
	}

	private EntityContext entity(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EntityContext _localctx = new EntityContext(Context, _parentState);
		EntityContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_entity, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 57; simpleEntity();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EntityContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_entity);
					State = 59;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 60; rjoin();
					State = 61; Match(T__6);
					State = 62; listOfEntities();
					State = 63; Match(T__7);
					}
					} 
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleEntityContext : ParserRuleContext {
		public IToken entityName;
		public IToken entityAlias;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public SimpleEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleEntity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleEntityContext simpleEntity() {
		SimpleEntityContext _localctx = new SimpleEntityContext(Context, State);
		EnterRule(_localctx, 4, RULE_simpleEntity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; _localctx.entityName = Match(NAME);
			State = 71; _localctx.entityAlias = Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOfEntitiesContext : ParserRuleContext {
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ListOfEntitiesContext listOfEntities() {
			return GetRuleContext<ListOfEntitiesContext>(0);
		}
		public RjoinContext rjoin() {
			return GetRuleContext<RjoinContext>(0);
		}
		public ListOfEntitiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOfEntities; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOfEntities(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOfEntitiesContext listOfEntities() {
		ListOfEntitiesContext _localctx = new ListOfEntitiesContext(Context, State);
		EnterRule(_localctx, 6, RULE_listOfEntities);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; entity(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; entity(0);
				State = 75; Match(T__8);
				State = 76; listOfEntities();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 78; entity(0);
				State = 79; Match(T__8);
				State = 80; listOfEntities();
				State = 81; rjoin();
				State = 82; Match(T__6);
				State = 83; entity(0);
				State = 84; Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RjoinContext : ParserRuleContext {
		public IToken relationshipName;
		public IToken relationshipAlias;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public RjoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rjoin; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRjoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RjoinContext rjoin() {
		RjoinContext _localctx = new RjoinContext(Context, State);
		EnterRule(_localctx, 8, RULE_rjoin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(T__9);
			State = 89; _localctx.relationshipName = Match(NAME);
			State = 90; _localctx.relationshipAlias = Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public AggregationFunctionContext[] aggregationFunction() {
			return GetRuleContexts<AggregationFunctionContext>();
		}
		public AggregationFunctionContext aggregationFunction(int i) {
			return GetRuleContext<AggregationFunctionContext>(i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 10, RULE_select);
		int _la;
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; simpleAttribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; listOfAttributes();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94; aggregationFunction();
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 95; Match(T__8);
					State = 96; aggregationFunction();
					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102; listOfAttributes();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 103; Match(T__8);
					State = 104; aggregationFunction();
					}
					}
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleAttributeContext : ParserRuleContext {
		public IToken entityName;
		public IToken attribute;
		public IToken relationshipName;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public SimpleAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAttribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleAttributeContext simpleAttribute() {
		SimpleAttributeContext _localctx = new SimpleAttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_simpleAttribute);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; _localctx.entityName = Match(NAME);
				State = 113; Match(T__10);
				State = 114; _localctx.attribute = Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; _localctx.relationshipName = Match(NAME);
				State = 116; Match(T__10);
				State = 117; _localctx.attribute = Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOfAttributesContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public ListOfAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOfAttributes; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOfAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOfAttributesContext listOfAttributes() {
		ListOfAttributesContext _localctx = new ListOfAttributesContext(Context, State);
		EnterRule(_localctx, 14, RULE_listOfAttributes);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; simpleAttribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; simpleAttribute();
				State = 122; Match(T__8);
				State = 123; listOfAttributes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public IToken description;
		public ITerminalNode NAME() { return GetToken(QueryBuilderQueriesParser.NAME, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 16, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; _localctx.description = Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregationFunctionContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public AggregationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregationFunction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregationFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregationFunctionContext aggregationFunction() {
		AggregationFunctionContext _localctx = new AggregationFunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_aggregationFunction);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; Match(T__11);
				State = 130; Match(T__6);
				State = 131; simpleAttribute();
				State = 132; Match(T__7);
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 133; alias();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; Match(T__12);
				State = 137; Match(T__6);
				State = 138; simpleAttribute();
				State = 139; Match(T__7);
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 140; alias();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 143; Match(T__13);
				State = 144; Match(T__6);
				State = 145; simpleAttribute();
				State = 146; Match(T__7);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 147; alias();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 150; Match(T__14);
				State = 151; Match(T__6);
				State = 152; simpleAttribute();
				State = 153; Match(T__7);
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 154; alias();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 157; Match(T__15);
				State = 158; Match(T__6);
				State = 159; simpleAttribute();
				State = 160; Match(T__7);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 161; alias();
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 164; Match(T__15);
				State = 165; Match(T__16);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 166; alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 20, RULE_where);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode VALUE() { return GetToken(QueryBuilderQueriesParser.VALUE, 0); }
		public ITerminalNode NUMERIC() { return GetToken(QueryBuilderQueriesParser.NUMERIC, 0); }
		public LogicalExpressionContext[] logicalExpression() {
			return GetRuleContexts<LogicalExpressionContext>();
		}
		public LogicalExpressionContext logicalExpression(int i) {
			return GetRuleContext<LogicalExpressionContext>(i);
		}
		public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public OtherExpressionContext otherExpression() {
			return GetRuleContext<OtherExpressionContext>(0);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 22, RULE_expressionList);
		int _la;
		try {
			int _alt;
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; simpleAttribute();
				State = 174; arithmeticExpression();
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 175; Match(VALUE);
					}
				}

				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMERIC) {
					{
					State = 178; Match(NUMERIC);
					}
				}

				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 181; logicalExpression();
						State = 182; expressionList();
						}
						} 
					}
					State = 188;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189; Match(T__6);
				State = 190; simpleAttribute();
				State = 191; otherExpression();
				State = 192; Match(T__7);
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 193; logicalExpression();
						State = 194; expressionList();
						}
						} 
					}
					State = 200;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				}
				break;
			case T__26:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201; otherExpression();
				State = 207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 202; logicalExpression();
						State = 203; expressionList();
						}
						} 
					}
					State = 209;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_arithmeticExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherExpressionContext : ParserRuleContext {
		public ITerminalNode[] NUMERIC() { return GetTokens(QueryBuilderQueriesParser.NUMERIC); }
		public ITerminalNode NUMERIC(int i) {
			return GetToken(QueryBuilderQueriesParser.NUMERIC, i);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ITerminalNode[] VALUE() { return GetTokens(QueryBuilderQueriesParser.VALUE); }
		public ITerminalNode VALUE(int i) {
			return GetToken(QueryBuilderQueriesParser.VALUE, i);
		}
		public OtherExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherExpressionContext otherExpression() {
		OtherExpressionContext _localctx = new OtherExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_otherExpression);
		int _la;
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214; Match(T__26);
				State = 215; Match(NUMERIC);
				State = 216; Match(T__27);
				State = 217; Match(NUMERIC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; Match(T__28);
				State = 219; Match(T__6);
				State = 220; query();
				State = 221; Match(T__7);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 223; Match(T__28);
				State = 224; Match(T__6);
				State = 225; Match(NUMERIC);
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 226; Match(T__8);
					State = 227; Match(NUMERIC);
					}
					}
					State = 232;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 233; Match(T__7);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 234; Match(T__28);
				State = 235; Match(T__6);
				State = 236; Match(VALUE);
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 237; Match(T__8);
					State = 238; Match(VALUE);
					}
					}
					State = 243;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 244; Match(T__7);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 245; Match(T__29);
				State = 246; Match(T__6);
				State = 247; query();
				State = 248; Match(T__7);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 250; Match(T__29);
				State = 251; Match(T__6);
				State = 252; Match(NUMERIC);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 253; Match(T__8);
					State = 254; Match(NUMERIC);
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 260; Match(T__7);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 261; Match(T__29);
				State = 262; Match(T__6);
				State = 263; Match(VALUE);
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 264; Match(T__8);
					State = 265; Match(VALUE);
					}
					}
					State = 270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 271; Match(T__7);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 272; Match(T__30);
				State = 273; Match(T__6);
				State = 274; query();
				State = 275; Match(T__7);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 277; Match(T__31);
				State = 278; Match(T__6);
				State = 279; query();
				State = 280; Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = TokenStream.LA(1);
			if ( !(_la==T__27 || _la==T__32) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupbyContext : ParserRuleContext {
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public GroupbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupbyContext groupby() {
		GroupbyContext _localctx = new GroupbyContext(Context, State);
		EnterRule(_localctx, 30, RULE_groupby);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; listOfAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingContext : ParserRuleContext {
		public AggregationFunctionContext aggregationFunction() {
			return GetRuleContext<AggregationFunctionContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode NUMERIC() { return GetToken(QueryBuilderQueriesParser.NUMERIC, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public HavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingContext having() {
		HavingContext _localctx = new HavingContext(Context, State);
		EnterRule(_localctx, 32, RULE_having);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; aggregationFunction();
				State = 289; arithmeticExpression();
				State = 290; Match(NUMERIC);
				}
				break;
			case T__6:
			case T__26:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public OrderbyContext[] orderby() {
			return GetRuleContexts<OrderbyContext>();
		}
		public OrderbyContext orderby(int i) {
			return GetRuleContext<OrderbyContext>(i);
		}
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 34, RULE_orderby);
		try {
			int _alt;
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295; listOfAttributes();
				State = 296; Match(T__33);
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 297; Match(T__8);
						State = 298; orderby();
						}
						} 
					}
					State = 303;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; listOfAttributes();
				State = 305; Match(T__34);
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 306; Match(T__8);
						State = 307; orderby();
						}
						} 
					}
					State = 312;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return entity_sempred((EntityContext)_localctx, predIndex);
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x13E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '-', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x31', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x35', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x39', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x44', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'G', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'Y', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x64', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'g', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', 'l', '\n', '\a', '\f', '\a', '\xE', '\a', 'o', '\v', '\a', 
		'\x5', '\a', 'q', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'y', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x80', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x89', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x90', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x97', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x9E', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\xA5', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\xAA', '\n', '\v', '\x5', '\v', '\xAC', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB3', 
		'\n', '\r', '\x3', '\r', '\x5', '\r', '\xB6', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\xBB', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\xBE', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xC7', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\xCA', '\v', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xD0', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\xD3', '\v', '\r', '\x5', '\r', '\xD5', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\xE7', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\xEA', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xF2', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xF5', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x102', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x105', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x10D', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x110', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x11D', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x128', '\n', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x12E', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x131', '\v', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x137', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x13A', '\v', 
		'\x13', '\x5', '\x13', '\x13C', '\n', '\x13', '\x3', '\x13', '\x2', '\x3', 
		'\x4', '\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '\x2', 
		'\x4', '\x3', '\x2', '\x14', '\x1C', '\x4', '\x2', '\x1E', '\x1E', '#', 
		'#', '\x2', '\x15B', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', ':', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'H', '\x3', '\x2', '\x2', '\x2', '\b', 
		'X', '\x3', '\x2', '\x2', '\x2', '\n', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'p', '\x3', '\x2', '\x2', '\x2', '\xE', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x12', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\x18', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xD6', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x11E', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\"', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x13B', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', '\x3', 
		'\x2', '\x2', '\'', '(', '\x5', '\x4', '\x3', '\x2', '(', ')', '\a', '\x4', 
		'\x2', '\x2', ')', ',', '\x5', '\f', '\a', '\x2', '*', '+', '\a', '\x5', 
		'\x2', '\x2', '+', '-', '\x5', '\x16', '\f', '\x2', ',', '*', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '\x6', '\x2', '\x2', '/', '\x31', 
		'\x5', ' ', '\x11', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\a', '\a', '\x2', '\x2', '\x33', '\x35', '\x5', 
		'\"', '\x12', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\b', '\x2', '\x2', '\x37', '\x39', '\x5', 
		'$', '\x13', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x3', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\b', '\x3', '\x1', '\x2', ';', '<', '\x5', '\x6', '\x4', 
		'\x2', '<', '\x45', '\x3', '\x2', '\x2', '\x2', '=', '>', '\f', '\x3', 
		'\x2', '\x2', '>', '?', '\x5', '\n', '\x6', '\x2', '?', '@', '\a', '\t', 
		'\x2', '\x2', '@', '\x41', '\x5', '\b', '\x5', '\x2', '\x41', '\x42', 
		'\a', '\n', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '=', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x5', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '&', '\x2', '\x2', 'I', 'J', 
		'\a', '&', '\x2', '\x2', 'J', '\a', '\x3', '\x2', '\x2', '\x2', 'K', 'Y', 
		'\x5', '\x4', '\x3', '\x2', 'L', 'M', '\x5', '\x4', '\x3', '\x2', 'M', 
		'N', '\a', '\v', '\x2', '\x2', 'N', 'O', '\x5', '\b', '\x5', '\x2', 'O', 
		'Y', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x5', '\x4', '\x3', '\x2', 
		'Q', 'R', '\a', '\v', '\x2', '\x2', 'R', 'S', '\x5', '\b', '\x5', '\x2', 
		'S', 'T', '\x5', '\n', '\x6', '\x2', 'T', 'U', '\a', '\t', '\x2', '\x2', 
		'U', 'V', '\x5', '\x4', '\x3', '\x2', 'V', 'W', '\a', '\n', '\x2', '\x2', 
		'W', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'K', '\x3', '\x2', '\x2', '\x2', 
		'X', 'L', '\x3', '\x2', '\x2', '\x2', 'X', 'P', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\t', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\f', '\x2', '\x2', 
		'[', '\\', '\a', '&', '\x2', '\x2', '\\', ']', '\a', '&', '\x2', '\x2', 
		']', '\v', '\x3', '\x2', '\x2', '\x2', '^', 'q', '\x5', '\xE', '\b', '\x2', 
		'_', 'q', '\x5', '\x10', '\t', '\x2', '`', '\x65', '\x5', '\x14', '\v', 
		'\x2', '\x61', '\x62', '\a', '\v', '\x2', '\x2', '\x62', '\x64', '\x5', 
		'\x14', '\v', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'm', 
		'\x5', '\x10', '\t', '\x2', 'i', 'j', '\a', '\v', '\x2', '\x2', 'j', 'l', 
		'\x5', '\x14', '\v', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 
		'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', '^', '\x3', '\x2', '\x2', '\x2', 
		'p', '_', '\x3', '\x2', '\x2', '\x2', 'p', '`', '\x3', '\x2', '\x2', '\x2', 
		'p', 'h', '\x3', '\x2', '\x2', '\x2', 'q', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '&', '\x2', '\x2', 's', 't', '\a', '\r', '\x2', 
		'\x2', 't', 'y', '\a', '&', '\x2', '\x2', 'u', 'v', '\a', '&', '\x2', 
		'\x2', 'v', 'w', '\a', '\r', '\x2', '\x2', 'w', 'y', '\a', '&', '\x2', 
		'\x2', 'x', 'r', '\x3', '\x2', '\x2', '\x2', 'x', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'y', '\xF', '\x3', '\x2', '\x2', '\x2', 'z', '\x80', '\x5', '\xE', 
		'\b', '\x2', '{', '|', '\x5', '\xE', '\b', '\x2', '|', '}', '\a', '\v', 
		'\x2', '\x2', '}', '~', '\x5', '\x10', '\t', '\x2', '~', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', 'z', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x80', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\a', '&', '\x2', '\x2', '\x82', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\xE', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\t', '\x2', '\x2', '\x85', '\x86', '\x5', '\xE', '\b', 
		'\x2', '\x86', '\x88', '\a', '\n', '\x2', '\x2', '\x87', '\x89', '\x5', 
		'\x12', '\n', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '\xF', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		'\t', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\xE', '\b', '\x2', '\x8D', 
		'\x8F', '\a', '\n', '\x2', '\x2', '\x8E', '\x90', '\x5', '\x12', '\n', 
		'\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\a', '\x10', '\x2', '\x2', '\x92', '\x93', '\a', '\t', '\x2', 
		'\x2', '\x93', '\x94', '\x5', '\xE', '\b', '\x2', '\x94', '\x96', '\a', 
		'\n', '\x2', '\x2', '\x95', '\x97', '\x5', '\x12', '\n', '\x2', '\x96', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\x11', '\x2', '\x2', '\x99', '\x9A', '\a', '\t', '\x2', '\x2', '\x9A', 
		'\x9B', '\x5', '\xE', '\b', '\x2', '\x9B', '\x9D', '\a', '\n', '\x2', 
		'\x2', '\x9C', '\x9E', '\x5', '\x12', '\n', '\x2', '\x9D', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x12', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '\t', '\x2', '\x2', '\xA1', '\xA2', '\x5', 
		'\xE', '\b', '\x2', '\xA2', '\xA4', '\a', '\n', '\x2', '\x2', '\xA3', 
		'\xA5', '\x5', '\x12', '\n', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', '\x12', '\x2', '\x2', '\xA7', 
		'\xA9', '\a', '\x13', '\x2', '\x2', '\xA8', '\xAA', '\x5', '\x12', '\n', 
		'\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\x91', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\x5', '\x18', '\r', '\x2', '\xAE', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\x5', '\xE', '\b', '\x2', '\xB0', 
		'\xB2', '\x5', '\x1A', '\xE', '\x2', '\xB1', '\xB3', '\a', '(', '\x2', 
		'\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB6', '\a', ')', '\x2', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x1E', '\x10', '\x2', '\xB8', 
		'\xB9', '\x5', '\x18', '\r', '\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', 
		'\t', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\xE', '\b', '\x2', '\xC1', 
		'\xC2', '\x5', '\x1C', '\xF', '\x2', '\xC2', '\xC8', '\a', '\n', '\x2', 
		'\x2', '\xC3', '\xC4', '\x5', '\x1E', '\x10', '\x2', '\xC4', '\xC5', '\x5', 
		'\x18', '\r', '\x2', '\xC5', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xD1', '\x5', '\x1C', '\xF', 
		'\x2', '\xCC', '\xCD', '\x5', '\x1E', '\x10', '\x2', '\xCD', '\xCE', '\x5', 
		'\x18', '\r', '\x2', '\xCE', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\t', '\x2', '\x2', '\x2', '\xD7', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\x1D', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		')', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x1E', '\x2', '\x2', '\xDB', 
		'\x11D', '\a', ')', '\x2', '\x2', '\xDC', '\xDD', '\a', '\x1F', '\x2', 
		'\x2', '\xDD', '\xDE', '\a', '\t', '\x2', '\x2', '\xDE', '\xDF', '\x5', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', '\n', '\x2', '\x2', '\xE0', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x1F', '\x2', 
		'\x2', '\xE2', '\xE3', '\a', '\t', '\x2', '\x2', '\xE3', '\xE8', '\a', 
		')', '\x2', '\x2', '\xE4', '\xE5', '\a', '\v', '\x2', '\x2', '\xE5', '\xE7', 
		'\a', ')', '\x2', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\x11D', '\a', '\n', '\x2', '\x2', '\xEC', '\xED', '\a', '\x1F', '\x2', 
		'\x2', '\xED', '\xEE', '\a', '\t', '\x2', '\x2', '\xEE', '\xF3', '\a', 
		'(', '\x2', '\x2', '\xEF', '\xF0', '\a', '\v', '\x2', '\x2', '\xF0', '\xF2', 
		'\a', '(', '\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\x11D', '\a', '\n', '\x2', '\x2', '\xF7', '\xF8', '\a', ' ', '\x2', '\x2', 
		'\xF8', '\xF9', '\a', '\t', '\x2', '\x2', '\xF9', '\xFA', '\x5', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\a', '\n', '\x2', '\x2', '\xFB', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', ' ', '\x2', '\x2', '\xFD', 
		'\xFE', '\a', '\t', '\x2', '\x2', '\xFE', '\x103', '\a', ')', '\x2', '\x2', 
		'\xFF', '\x100', '\a', '\v', '\x2', '\x2', '\x100', '\x102', '\a', ')', 
		'\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x11D', '\a', '\n', '\x2', '\x2', '\x107', '\x108', '\a', ' ', '\x2', 
		'\x2', '\x108', '\x109', '\a', '\t', '\x2', '\x2', '\x109', '\x10E', '\a', 
		'(', '\x2', '\x2', '\x10A', '\x10B', '\a', '\v', '\x2', '\x2', '\x10B', 
		'\x10D', '\a', '(', '\x2', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x111', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x11D', '\a', '\n', '\x2', '\x2', '\x112', 
		'\x113', '\a', '!', '\x2', '\x2', '\x113', '\x114', '\a', '\t', '\x2', 
		'\x2', '\x114', '\x115', '\x5', '\x2', '\x2', '\x2', '\x115', '\x116', 
		'\a', '\n', '\x2', '\x2', '\x116', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x118', '\a', '\"', '\x2', '\x2', '\x118', '\x119', '\a', '\t', 
		'\x2', '\x2', '\x119', '\x11A', '\x5', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\a', '\n', '\x2', '\x2', '\x11B', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x11C', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\x11C', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x11C', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x112', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x11F', '\t', '\x3', '\x2', '\x2', '\x11F', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x121', '\x5', '\x10', '\t', '\x2', '\x121', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x5', '\x14', '\v', 
		'\x2', '\x123', '\x124', '\x5', '\x1A', '\xE', '\x2', '\x124', '\x125', 
		'\a', ')', '\x2', '\x2', '\x125', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x128', '\x5', '\x18', '\r', '\x2', '\x127', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x5', '\x10', '\t', 
		'\x2', '\x12A', '\x12F', '\a', '$', '\x2', '\x2', '\x12B', '\x12C', '\a', 
		'\v', '\x2', '\x2', '\x12C', '\x12E', '\x5', '$', '\x13', '\x2', '\x12D', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x5', 
		'\x10', '\t', '\x2', '\x133', '\x138', '\a', '%', '\x2', '\x2', '\x134', 
		'\x135', '\a', '\v', '\x2', '\x2', '\x135', '\x137', '\x5', '$', '\x13', 
		'\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '%', '\x3', '\x2', '\x2', '\x2', '#', ',', '\x30', '\x34', 
		'\x38', '\x45', 'X', '\x65', 'm', 'p', 'x', '\x7F', '\x88', '\x8F', '\x96', 
		'\x9D', '\xA4', '\xA9', '\xAB', '\xB2', '\xB5', '\xBC', '\xC8', '\xD1', 
		'\xD4', '\xE8', '\xF3', '\x103', '\x10E', '\x11C', '\x127', '\x12F', '\x138', 
		'\x13B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryBuilder.Parser
