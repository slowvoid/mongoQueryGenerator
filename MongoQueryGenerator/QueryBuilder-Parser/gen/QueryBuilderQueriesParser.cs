//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/daniellucredio/GitProjects/mongoQueryGenerator/MongoQueryGenerator/QueryBuilder-Parser/QueryBuilderQueries.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryBuilder.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QueryBuilderQueriesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, NAME=36, INTEGER=37, REAL=38, 
		STRING=39, WS=40;
	public const int
		RULE_query = 0, RULE_entity = 1, RULE_select = 2, RULE_attributeOrFunction = 3, 
		RULE_listOfAttributes = 4, RULE_simpleAttribute = 5, RULE_alias = 6, RULE_aggregationFunction = 7, 
		RULE_where = 8, RULE_logicalExpression = 9, RULE_logicalTerm = 10, RULE_value = 11, 
		RULE_relationalOperator = 12, RULE_rangeOperator = 13, RULE_logicalOperator = 14, 
		RULE_groupby = 15, RULE_having = 16, RULE_orderby = 17;
	public static readonly string[] ruleNames = {
		"query", "entity", "select", "attributeOrFunction", "listOfAttributes", 
		"simpleAttribute", "alias", "aggregationFunction", "where", "logicalExpression", 
		"logicalTerm", "value", "relationalOperator", "rangeOperator", "logicalOperator", 
		"groupby", "having", "orderby"
	};

	private static readonly string[] _LiteralNames = {
		null, "'from'", "'select'", "'where'", "'group by'", "'having'", "'order by'", 
		"'rjoin'", "'<'", "'>'", "'('", "','", "')'", "'*'", "'.'", "'avg'", "'max'", 
		"'min'", "'sum'", "'count'", "'(*)'", "'not'", "'null'", "'='", "'<>'", 
		"'>='", "'<='", "'like'", "'is'", "'between'", "'and'", "'in'", "'exists'", 
		"'or'", "'asc'", "'desc'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NAME", "INTEGER", "REAL", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryBuilderQueries.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryBuilderQueriesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryBuilderQueriesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryBuilderQueriesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public GroupbyContext groupby() {
			return GetRuleContext<GroupbyContext>(0);
		}
		public HavingContext having() {
			return GetRuleContext<HavingContext>(0);
		}
		public OrderbyContext orderby() {
			return GetRuleContext<OrderbyContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(T__0);
			State = 37; entity(0);
			State = 38; Match(T__1);
			State = 39; select();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 40; Match(T__2);
				State = 41; where();
				}
			}

			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 44; Match(T__3);
				State = 45; groupby();
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 48; Match(T__4);
				State = 49; having();
				}
			}

			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 52; Match(T__5);
				State = 53; orderby();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public QueryBuilder.Operation.Arguments.QueryableEntity qEntity;
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	 
		public EntityContext() { }
		public virtual void CopyFrom(EntityContext context) {
			base.CopyFrom(context);
			this.qEntity = context.qEntity;
		}
	}
	public partial class SimpleEntityContext : EntityContext {
		public IToken simpleEntityName;
		public IToken simpleEntityAlias;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public SimpleEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSimpleEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSimpleEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputedEntityContext : EntityContext {
		public EntityContext computedEntityLeft;
		public IToken computedEntityRelationshipName;
		public IToken computedEntityRelationshipAlias;
		public EntityContext _entity;
		public IList<EntityContext> _computedEntityRight = new List<EntityContext>();
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public ComputedEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterComputedEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitComputedEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisEntityContext : EntityContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ParenthesisEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterParenthesisEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitParenthesisEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		return entity(0);
	}

	private EntityContext entity(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EntityContext _localctx = new EntityContext(Context, _parentState);
		EntityContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_entity, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				_localctx = new SimpleEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 57; ((SimpleEntityContext)_localctx).simpleEntityName = Match(NAME);
				State = 59;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 58; ((SimpleEntityContext)_localctx).simpleEntityAlias = Match(NAME);
					}
					break;
				}
				}
				break;
			case T__9:
				{
				_localctx = new ParenthesisEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; Match(T__9);
				State = 62; entity(0);
				State = 63; Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ComputedEntityContext(new EntityContext(_parentctx, _parentState));
					((ComputedEntityContext)_localctx).computedEntityLeft = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_entity);
					State = 67;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 68; Match(T__6);
					State = 69; Match(T__7);
					State = 70; ((ComputedEntityContext)_localctx).computedEntityRelationshipName = Match(NAME);
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NAME) {
						{
						State = 71; ((ComputedEntityContext)_localctx).computedEntityRelationshipAlias = Match(NAME);
						}
					}

					State = 74; Match(T__8);
					State = 75; Match(T__9);
					State = 76; ((ComputedEntityContext)_localctx)._entity = entity(0);
					((ComputedEntityContext)_localctx)._computedEntityRight.Add(((ComputedEntityContext)_localctx)._entity);
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__10) {
						{
						{
						State = 77; Match(T__10);
						State = 78; ((ComputedEntityContext)_localctx)._entity = entity(0);
						((ComputedEntityContext)_localctx)._computedEntityRight.Add(((ComputedEntityContext)_localctx)._entity);
						}
						}
						State = 83;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 84; Match(T__11);
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
	 
		public SelectContext() { }
		public virtual void CopyFrom(SelectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectAllContext : SelectContext {
		public SelectAllContext(SelectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSelectAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSelectAll(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectAttributeOrFunctionContext : SelectContext {
		public AttributeOrFunctionContext[] attributeOrFunction() {
			return GetRuleContexts<AttributeOrFunctionContext>();
		}
		public AttributeOrFunctionContext attributeOrFunction(int i) {
			return GetRuleContext<AttributeOrFunctionContext>(i);
		}
		public SelectAttributeOrFunctionContext(SelectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSelectAttributeOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSelectAttributeOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAttributeOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 4, RULE_select);
		int _la;
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				_localctx = new SelectAllContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; Match(T__12);
				}
				break;
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case NAME:
				_localctx = new SelectAttributeOrFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; attributeOrFunction();
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 93; Match(T__10);
					State = 94; attributeOrFunction();
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeOrFunctionContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AggregationFunctionContext aggregationFunction() {
			return GetRuleContext<AggregationFunctionContext>(0);
		}
		public AttributeOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeOrFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterAttributeOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitAttributeOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeOrFunctionContext attributeOrFunction() {
		AttributeOrFunctionContext _localctx = new AttributeOrFunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_attributeOrFunction);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; simpleAttribute();
				}
				break;
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; aggregationFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOfAttributesContext : ParserRuleContext {
		public SimpleAttributeContext[] simpleAttribute() {
			return GetRuleContexts<SimpleAttributeContext>();
		}
		public SimpleAttributeContext simpleAttribute(int i) {
			return GetRuleContext<SimpleAttributeContext>(i);
		}
		public ListOfAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOfAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterListOfAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitListOfAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOfAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOfAttributesContext listOfAttributes() {
		ListOfAttributesContext _localctx = new ListOfAttributesContext(Context, State);
		EnterRule(_localctx, 8, RULE_listOfAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; simpleAttribute();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				State = 107; Match(T__10);
				State = 108; simpleAttribute();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleAttributeContext : ParserRuleContext {
		public IToken elementName;
		public IToken attribute;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public SimpleAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSimpleAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSimpleAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleAttributeContext simpleAttribute() {
		SimpleAttributeContext _localctx = new SimpleAttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_simpleAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; _localctx.elementName = Match(NAME);
			State = 115; Match(T__13);
			State = 116; _localctx.attribute = Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public IToken description;
		public ITerminalNode NAME() { return GetToken(QueryBuilderQueriesParser.NAME, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 12, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; _localctx.description = Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregationFunctionContext : ParserRuleContext {
		public AggregationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregationFunction; } }
	 
		public AggregationFunctionContext() { }
		public virtual void CopyFrom(AggregationFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CountAllFunctionContext : AggregationFunctionContext {
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public CountAllFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterCountAllFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitCountAllFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountAllFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public CountFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterCountFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitCountFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public SumFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSumFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSumFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public MinFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterMinFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitMinFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public AverageFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterAverageFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitAverageFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public MaxFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterMaxFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitMaxFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregationFunctionContext aggregationFunction() {
		AggregationFunctionContext _localctx = new AggregationFunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_aggregationFunction);
		int _la;
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new AverageFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; Match(T__14);
				State = 121; Match(T__9);
				State = 122; simpleAttribute();
				State = 123; Match(T__11);
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 124; alias();
					}
				}

				}
				break;
			case 2:
				_localctx = new MaxFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(T__15);
				State = 128; Match(T__9);
				State = 129; simpleAttribute();
				State = 130; Match(T__11);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 131; alias();
					}
				}

				}
				break;
			case 3:
				_localctx = new MinFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; Match(T__16);
				State = 135; Match(T__9);
				State = 136; simpleAttribute();
				State = 137; Match(T__11);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 138; alias();
					}
				}

				}
				break;
			case 4:
				_localctx = new SumFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 141; Match(T__17);
				State = 142; Match(T__9);
				State = 143; simpleAttribute();
				State = 144; Match(T__11);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 145; alias();
					}
				}

				}
				break;
			case 5:
				_localctx = new CountFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 148; Match(T__18);
				State = 149; Match(T__9);
				State = 150; simpleAttribute();
				State = 151; Match(T__11);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 152; alias();
					}
				}

				}
				break;
			case 6:
				_localctx = new CountAllFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 155; Match(T__18);
				State = 156; Match(T__19);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 157; alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterWhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitWhere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 16, RULE_where);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; logicalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public LogicalTermContext[] logicalTerm() {
			return GetRuleContexts<LogicalTermContext>();
		}
		public LogicalTermContext logicalTerm(int i) {
			return GetRuleContext<LogicalTermContext>(i);
		}
		public LogicalOperatorContext[] logicalOperator() {
			return GetRuleContexts<LogicalOperatorContext>();
		}
		public LogicalOperatorContext logicalOperator(int i) {
			return GetRuleContext<LogicalOperatorContext>(i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; logicalTerm();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29 || _la==T__32) {
				{
				{
				State = 165; logicalOperator();
				State = 166; logicalTerm();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalTermContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public RangeOperatorContext rangeOperator() {
			return GetRuleContext<RangeOperatorContext>(0);
		}
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public LogicalTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterLogicalTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitLogicalTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalTermContext logicalTerm() {
		LogicalTermContext _localctx = new LogicalTermContext(Context, State);
		EnterRule(_localctx, 20, RULE_logicalTerm);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; simpleAttribute();
				State = 174; relationalOperator();
				State = 175; value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; simpleAttribute();
				State = 178; rangeOperator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180; Match(T__9);
				State = 181; logicalExpression();
				State = 182; Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QueryBuilderQueriesParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(QueryBuilderQueriesParser.INTEGER, 0); }
		public ITerminalNode REAL() { return GetToken(QueryBuilderQueriesParser.REAL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; Match(STRING);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; Match(INTEGER);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188; Match(REAL);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 4);
				{
				State = 189; Match(T__20);
				State = 190; Match(T__21);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 5);
				{
				State = 191; Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeOperatorContext : ParserRuleContext {
		public string type;
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public RangeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterRangeOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitRangeOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeOperatorContext rangeOperator() {
		RangeOperatorContext _localctx = new RangeOperatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_rangeOperator);
		int _la;
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; Match(T__28);
				State = 197; value();
				State = 198; Match(T__29);
				State = 199; value();
				 _localctx.type =  "BETWEEN"; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; Match(T__20);
				State = 203; Match(T__30);
				State = 204; Match(T__9);
				State = 205; query();
				State = 206; Match(T__11);
				 _localctx.type =  "NOT_IN_QUERY"; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209; Match(T__20);
				State = 210; Match(T__30);
				State = 211; Match(T__9);
				State = 212; value();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 213; Match(T__10);
					State = 214; value();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 220; Match(T__11);
				 _localctx.type =  "NOT_IN_VALUES"; 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223; Match(T__30);
				State = 224; Match(T__9);
				State = 225; query();
				State = 226; Match(T__11);
				 _localctx.type =  "IN_QUERY"; 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 229; Match(T__30);
				State = 230; Match(T__9);
				State = 231; value();
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 232; Match(T__10);
					State = 233; value();
					}
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 239; Match(T__11);
				 _localctx.type =  "IN_VALUES"; 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 242; Match(T__20);
				State = 243; Match(T__31);
				State = 244; Match(T__9);
				State = 245; query();
				State = 246; Match(T__11);
				 _localctx.type =  "NOT_EXISTS_QUERY"; 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 249; Match(T__31);
				State = 250; Match(T__9);
				State = 251; query();
				State = 252; Match(T__11);
				 _localctx.type =  "EXISTS_QUERY"; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.LA(1);
			if ( !(_la==T__29 || _la==T__32) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupbyContext : ParserRuleContext {
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public GroupbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterGroupby(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitGroupby(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupbyContext groupby() {
		GroupbyContext _localctx = new GroupbyContext(Context, State);
		EnterRule(_localctx, 30, RULE_groupby);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; listOfAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingContext : ParserRuleContext {
		public AggregationFunctionContext aggregationFunction() {
			return GetRuleContext<AggregationFunctionContext>(0);
		}
		public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public HavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterHaving(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitHaving(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingContext having() {
		HavingContext _localctx = new HavingContext(Context, State);
		EnterRule(_localctx, 32, RULE_having);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261; aggregationFunction();
				State = 262; relationalOperator();
				State = 263; value();
				}
				break;
			case T__9:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265; logicalExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public OrderbyContext[] orderby() {
			return GetRuleContexts<OrderbyContext>();
		}
		public OrderbyContext orderby(int i) {
			return GetRuleContext<OrderbyContext>(i);
		}
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterOrderby(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitOrderby(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 34, RULE_orderby);
		try {
			int _alt;
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; listOfAttributes();
				State = 269; Match(T__33);
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 270; Match(T__10);
						State = 271; orderby();
						}
						} 
					}
					State = 276;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; listOfAttributes();
				State = 278; Match(T__34);
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 279; Match(T__10);
						State = 280; orderby();
						}
						} 
					}
					State = 285;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return entity_sempred((EntityContext)_localctx, predIndex);
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x123', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '-', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x31', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x35', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x39', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '>', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'K', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', 'R', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'U', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'Y', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\\', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x62', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\x65', '\v', '\x4', '\x5', '\x4', 'g', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'k', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'p', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 's', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x80', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x87', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x8E', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x95', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x9C', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xA1', '\n', '\t', '\x5', '\t', '\xA3', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xAB', '\n', '\v', '\f', '\v', '\xE', '\v', '\xAE', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\xBB', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xC3', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xDA', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xDD', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\xED', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xF0', '\v', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x102', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x10D', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x113', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x116', '\v', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x11C', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x11F', '\v', '\x13', '\x5', 
		'\x13', '\x121', '\n', '\x13', '\x3', '\x13', '\x2', '\x3', '\x4', '\x14', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '\x2', '\x4', 
		'\x4', '\x2', '\n', '\v', '\x19', '\x1E', '\x4', '\x2', ' ', ' ', '#', 
		'#', '\x2', '\x13B', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'j', '\x3', '\x2', '\x2', '\x2', '\n', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\f', 't', '\x3', '\x2', '\x2', '\x2', '\xE', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xBA', '\x3', '\x2', '\x2', '\x2', '\x18', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x103', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x105', '\x3', '\x2', '\x2', '\x2', '\"', '\x10C', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x120', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', 
		'\x3', '\x2', '\x2', '\'', '(', '\x5', '\x4', '\x3', '\x2', '(', ')', 
		'\a', '\x4', '\x2', '\x2', ')', ',', '\x5', '\x6', '\x4', '\x2', '*', 
		'+', '\a', '\x5', '\x2', '\x2', '+', '-', '\x5', '\x12', '\n', '\x2', 
		',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x6', '\x2', 
		'\x2', '/', '\x31', '\x5', ' ', '\x11', '\x2', '\x30', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\a', '\x2', '\x2', 
		'\x33', '\x35', '\x5', '\"', '\x12', '\x2', '\x34', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\b', '\x2', '\x2', 
		'\x37', '\x39', '\x5', '$', '\x13', '\x2', '\x38', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x3', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\b', '\x3', '\x1', '\x2', ';', 
		'=', '\a', '&', '\x2', '\x2', '<', '>', '\a', '&', '\x2', '\x2', '=', 
		'<', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x44', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\f', '\x2', 
		'\x2', '@', '\x41', '\x5', '\x4', '\x3', '\x2', '\x41', '\x42', '\a', 
		'\xE', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', '\x43', 
		':', '\x3', '\x2', '\x2', '\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'Z', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\f', '\x4', 
		'\x2', '\x2', '\x46', 'G', '\a', '\t', '\x2', '\x2', 'G', 'H', '\a', '\n', 
		'\x2', '\x2', 'H', 'J', '\a', '&', '\x2', '\x2', 'I', 'K', '\a', '&', 
		'\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\v', 
		'\x2', '\x2', 'M', 'N', '\a', '\f', '\x2', '\x2', 'N', 'S', '\x5', '\x4', 
		'\x3', '\x2', 'O', 'P', '\a', '\r', '\x2', '\x2', 'P', 'R', '\x5', '\x4', 
		'\x3', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '\xE', '\x2', '\x2', 'W', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x45', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x3', 
		'\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', 
		'\x2', '\x2', '\x2', '[', '\x5', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', ']', 'g', '\a', '\xF', '\x2', '\x2', '^', 
		'\x63', '\x5', '\b', '\x5', '\x2', '_', '`', '\a', '\r', '\x2', '\x2', 
		'`', '\x62', '\x5', '\b', '\x5', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x66', ']', '\x3', '\x2', '\x2', '\x2', '\x66', '^', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\a', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x5', 
		'\f', '\a', '\x2', 'i', 'k', '\x5', '\x10', '\t', '\x2', 'j', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'q', '\x5', '\f', '\a', '\x2', 'm', 'n', 
		'\a', '\r', '\x2', '\x2', 'n', 'p', '\x5', '\f', '\a', '\x2', 'o', 'm', 
		'\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 
		'o', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 
		'r', '\v', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\a', '&', '\x2', '\x2', 'u', 'v', '\a', '\x10', '\x2', 
		'\x2', 'v', 'w', '\a', '&', '\x2', '\x2', 'w', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '&', '\x2', '\x2', 'y', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\x11', '\x2', '\x2', '{', '|', '\a', '\f', '\x2', 
		'\x2', '|', '}', '\x5', '\f', '\a', '\x2', '}', '\x7F', '\a', '\xE', '\x2', 
		'\x2', '~', '\x80', '\x5', '\xE', '\b', '\x2', '\x7F', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\x12', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\f', '\x2', '\x2', '\x83', '\x84', '\x5', '\f', 
		'\a', '\x2', '\x84', '\x86', '\a', '\xE', '\x2', '\x2', '\x85', '\x87', 
		'\x5', '\xE', '\b', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x89', '\a', '\x13', '\x2', '\x2', '\x89', '\x8A', 
		'\a', '\f', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\f', '\a', '\x2', '\x8B', 
		'\x8D', '\a', '\xE', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\xE', '\b', 
		'\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '\x14', '\x2', '\x2', '\x90', '\x91', '\a', '\f', '\x2', 
		'\x2', '\x91', '\x92', '\x5', '\f', '\a', '\x2', '\x92', '\x94', '\a', 
		'\xE', '\x2', '\x2', '\x93', '\x95', '\x5', '\xE', '\b', '\x2', '\x94', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', 
		'\x15', '\x2', '\x2', '\x97', '\x98', '\a', '\f', '\x2', '\x2', '\x98', 
		'\x99', '\x5', '\f', '\a', '\x2', '\x99', '\x9B', '\a', '\xE', '\x2', 
		'\x2', '\x9A', '\x9C', '\x5', '\xE', '\b', '\x2', '\x9B', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x15', '\x2', 
		'\x2', '\x9E', '\xA0', '\a', '\x16', '\x2', '\x2', '\x9F', '\xA1', '\x5', 
		'\xE', '\b', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', 'z', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\x88', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\x14', '\v', '\x2', '\xA5', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xAC', '\x5', '\x16', '\f', 
		'\x2', '\xA7', '\xA8', '\x5', '\x1E', '\x10', '\x2', '\xA8', '\xA9', '\x5', 
		'\x16', '\f', '\x2', '\xA9', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\x15', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x5', '\f', '\a', 
		'\x2', '\xB0', '\xB1', '\x5', '\x1A', '\xE', '\x2', '\xB1', '\xB2', '\x5', 
		'\x18', '\r', '\x2', '\xB2', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\x5', '\f', '\a', '\x2', '\xB4', '\xB5', '\x5', '\x1C', '\xF', 
		'\x2', '\xB5', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', 
		'\f', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x14', '\v', '\x2', '\xB8', 
		'\xB9', '\a', '\xE', '\x2', '\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xC3', '\a', ')', '\x2', 
		'\x2', '\xBD', '\xC3', '\a', '\'', '\x2', '\x2', '\xBE', '\xC3', '\a', 
		'(', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x17', '\x2', '\x2', '\xC0', 
		'\xC3', '\a', '\x18', '\x2', '\x2', '\xC1', '\xC3', '\a', '\x18', '\x2', 
		'\x2', '\xC2', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\x19', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\t', 
		'\x2', '\x2', '\x2', '\xC5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\a', '\x1F', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\x18', '\r', 
		'\x2', '\xC8', '\xC9', '\a', ' ', '\x2', '\x2', '\xC9', '\xCA', '\x5', 
		'\x18', '\r', '\x2', '\xCA', '\xCB', '\b', '\xF', '\x1', '\x2', '\xCB', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x17', '\x2', 
		'\x2', '\xCD', '\xCE', '\a', '!', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'\f', '\x2', '\x2', '\xCF', '\xD0', '\x5', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\a', '\xE', '\x2', '\x2', '\xD1', '\xD2', '\b', '\xF', '\x1', 
		'\x2', '\xD2', '\x102', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', 
		'\x17', '\x2', '\x2', '\xD4', '\xD5', '\a', '!', '\x2', '\x2', '\xD5', 
		'\xD6', '\a', '\f', '\x2', '\x2', '\xD6', '\xDB', '\x5', '\x18', '\r', 
		'\x2', '\xD7', '\xD8', '\a', '\r', '\x2', '\x2', '\xD8', '\xDA', '\x5', 
		'\x18', '\r', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\a', '\xE', '\x2', '\x2', '\xDF', '\xE0', '\b', '\xF', '\x1', 
		'\x2', '\xE0', '\x102', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', 
		'!', '\x2', '\x2', '\xE2', '\xE3', '\a', '\f', '\x2', '\x2', '\xE3', '\xE4', 
		'\x5', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\xE', '\x2', '\x2', 
		'\xE5', '\xE6', '\b', '\xF', '\x1', '\x2', '\xE6', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xE8', '\a', '!', '\x2', '\x2', '\xE8', '\xE9', 
		'\a', '\f', '\x2', '\x2', '\xE9', '\xEE', '\x5', '\x18', '\r', '\x2', 
		'\xEA', '\xEB', '\a', '\r', '\x2', '\x2', '\xEB', '\xED', '\x5', '\x18', 
		'\r', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', 
		'\a', '\xE', '\x2', '\x2', '\xF2', '\xF3', '\b', '\xF', '\x1', '\x2', 
		'\xF3', '\x102', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x17', 
		'\x2', '\x2', '\xF5', '\xF6', '\a', '\"', '\x2', '\x2', '\xF6', '\xF7', 
		'\a', '\f', '\x2', '\x2', '\xF7', '\xF8', '\x5', '\x2', '\x2', '\x2', 
		'\xF8', '\xF9', '\a', '\xE', '\x2', '\x2', '\xF9', '\xFA', '\b', '\xF', 
		'\x1', '\x2', '\xFA', '\x102', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', 
		'\a', '\"', '\x2', '\x2', '\xFC', '\xFD', '\a', '\f', '\x2', '\x2', '\xFD', 
		'\xFE', '\x5', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '\xE', '\x2', 
		'\x2', '\xFF', '\x100', '\b', '\xF', '\x1', '\x2', '\x100', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\x101', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x101', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\x102', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\t', '\x3', '\x2', '\x2', '\x104', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\x5', '\n', '\x6', '\x2', '\x106', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x5', '\x10', '\t', 
		'\x2', '\x108', '\x109', '\x5', '\x1A', '\xE', '\x2', '\x109', '\x10A', 
		'\x5', '\x18', '\r', '\x2', '\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10D', '\x5', '\x14', '\v', '\x2', '\x10C', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\n', '\x6', 
		'\x2', '\x10F', '\x114', '\a', '$', '\x2', '\x2', '\x110', '\x111', '\a', 
		'\r', '\x2', '\x2', '\x111', '\x113', '\x5', '$', '\x13', '\x2', '\x112', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x113', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x5', 
		'\n', '\x6', '\x2', '\x118', '\x11D', '\a', '%', '\x2', '\x2', '\x119', 
		'\x11A', '\a', '\r', '\x2', '\x2', '\x11A', '\x11C', '\x5', '$', '\x13', 
		'\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '%', '\x3', '\x2', '\x2', '\x2', ' ', ',', '\x30', '\x34', 
		'\x38', '=', '\x43', 'J', 'S', 'Z', '\x63', '\x66', 'j', 'q', '\x7F', 
		'\x86', '\x8D', '\x94', '\x9B', '\xA0', '\xA2', '\xAC', '\xBA', '\xC2', 
		'\xDB', '\xEE', '\x101', '\x10C', '\x114', '\x11D', '\x120',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryBuilder.Parser
