//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/daniellucredio/GitProjects/mongoQueryGenerator/MongoQueryGenerator/QueryBuilder-Parser/QueryBuilderQueries.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryBuilder.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QueryBuilderQueriesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, NAME=31, INTEGER=32, 
		VALUE=33, NUMERIC=34, WS=35;
	public const int
		RULE_query = 0, RULE_entity = 1, RULE_select = 2, RULE_simpleAttribute = 3, 
		RULE_listOfAttributes = 4, RULE_alias = 5, RULE_aggregationFunction = 6, 
		RULE_where = 7, RULE_expressionList = 8, RULE_arithmeticExpression = 9, 
		RULE_otherExpression = 10, RULE_logicalExpression = 11, RULE_groupby = 12, 
		RULE_having = 13, RULE_orderby = 14;
	public static readonly string[] ruleNames = {
		"query", "entity", "select", "simpleAttribute", "listOfAttributes", "alias", 
		"aggregationFunction", "where", "expressionList", "arithmeticExpression", 
		"otherExpression", "logicalExpression", "groupby", "having", "orderby"
	};

	private static readonly string[] _LiteralNames = {
		null, "'from'", "'rjoin'", "'<'", "'>'", "'('", "','", "')'", "'.'", "'avg'", 
		"'max'", "'min'", "'sum'", "'count'", "'(*)'", "'='", "'<>'", "'>='", 
		"'<='", "'like'", "'is not null'", "'is null'", "'between'", "'and'", 
		"'not in'", "'in'", "'not exists'", "'exists'", "'or'", "'asc'", "'desc'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NAME", "INTEGER", "VALUE", 
		"NUMERIC", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryBuilderQueries.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryBuilderQueriesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryBuilderQueriesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryBuilderQueriesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(T__0);
			State = 31; entity(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public QueryBuilder.Operation.Arguments.QueryableEntity qEntity;
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	 
		public EntityContext() { }
		public virtual void CopyFrom(EntityContext context) {
			base.CopyFrom(context);
			this.qEntity = context.qEntity;
		}
	}
	public partial class SimpleEntityContext : EntityContext {
		public IToken simpleEntityName;
		public IToken simpleEntityAlias;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public SimpleEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSimpleEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSimpleEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputedEntityContext : EntityContext {
		public EntityContext computedEntityLeft;
		public IToken computedEntityRelationshipName;
		public IToken computedEntityRelationshipAlias;
		public EntityContext _entity;
		public IList<EntityContext> _computedEntityRight = new List<EntityContext>();
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public ComputedEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterComputedEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitComputedEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisEntityContext : EntityContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ParenthesisEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterParenthesisEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitParenthesisEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		return entity(0);
	}

	private EntityContext entity(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EntityContext _localctx = new EntityContext(Context, _parentState);
		EntityContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_entity, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				_localctx = new SimpleEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 34; ((SimpleEntityContext)_localctx).simpleEntityName = Match(NAME);
				State = 36;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 35; ((SimpleEntityContext)_localctx).simpleEntityAlias = Match(NAME);
					}
					break;
				}
				}
				break;
			case T__4:
				{
				_localctx = new ParenthesisEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38; Match(T__4);
				State = 39; entity(0);
				State = 40; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 65;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ComputedEntityContext(new EntityContext(_parentctx, _parentState));
					((ComputedEntityContext)_localctx).computedEntityLeft = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_entity);
					State = 44;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 45; Match(T__1);
					State = 46; Match(T__2);
					State = 47; ((ComputedEntityContext)_localctx).computedEntityRelationshipName = Match(NAME);
					State = 49;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NAME) {
						{
						State = 48; ((ComputedEntityContext)_localctx).computedEntityRelationshipAlias = Match(NAME);
						}
					}

					State = 51; Match(T__3);
					State = 52; Match(T__4);
					State = 53; ((ComputedEntityContext)_localctx)._entity = entity(0);
					((ComputedEntityContext)_localctx)._computedEntityRight.Add(((ComputedEntityContext)_localctx)._entity);
					State = 58;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 54; Match(T__5);
						State = 55; ((ComputedEntityContext)_localctx)._entity = entity(0);
						((ComputedEntityContext)_localctx)._computedEntityRight.Add(((ComputedEntityContext)_localctx)._entity);
						}
						}
						State = 60;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 61; Match(T__6);
					}
					} 
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public AggregationFunctionContext[] aggregationFunction() {
			return GetRuleContexts<AggregationFunctionContext>();
		}
		public AggregationFunctionContext aggregationFunction(int i) {
			return GetRuleContext<AggregationFunctionContext>(i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 4, RULE_select);
		int _la;
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; simpleAttribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; listOfAttributes();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; aggregationFunction();
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 71; Match(T__5);
					State = 72; aggregationFunction();
					}
					}
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78; listOfAttributes();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 79; Match(T__5);
					State = 80; aggregationFunction();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleAttributeContext : ParserRuleContext {
		public IToken entityName;
		public IToken attribute;
		public IToken relationshipName;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public SimpleAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSimpleAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSimpleAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleAttributeContext simpleAttribute() {
		SimpleAttributeContext _localctx = new SimpleAttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleAttribute);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; _localctx.entityName = Match(NAME);
				State = 89; Match(T__7);
				State = 90; _localctx.attribute = Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; _localctx.relationshipName = Match(NAME);
				State = 92; Match(T__7);
				State = 93; _localctx.attribute = Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOfAttributesContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public ListOfAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOfAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterListOfAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitListOfAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOfAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOfAttributesContext listOfAttributes() {
		ListOfAttributesContext _localctx = new ListOfAttributesContext(Context, State);
		EnterRule(_localctx, 8, RULE_listOfAttributes);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; simpleAttribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; simpleAttribute();
				State = 98; Match(T__5);
				State = 99; listOfAttributes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public IToken description;
		public ITerminalNode NAME() { return GetToken(QueryBuilderQueriesParser.NAME, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 10, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; _localctx.description = Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregationFunctionContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public AggregationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregationFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterAggregationFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitAggregationFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregationFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregationFunctionContext aggregationFunction() {
		AggregationFunctionContext _localctx = new AggregationFunctionContext(Context, State);
		EnterRule(_localctx, 12, RULE_aggregationFunction);
		int _la;
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(T__8);
				State = 106; Match(T__4);
				State = 107; simpleAttribute();
				State = 108; Match(T__6);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 109; alias();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; Match(T__9);
				State = 113; Match(T__4);
				State = 114; simpleAttribute();
				State = 115; Match(T__6);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 116; alias();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119; Match(T__10);
				State = 120; Match(T__4);
				State = 121; simpleAttribute();
				State = 122; Match(T__6);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 123; alias();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 126; Match(T__11);
				State = 127; Match(T__4);
				State = 128; simpleAttribute();
				State = 129; Match(T__6);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 130; alias();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 133; Match(T__12);
				State = 134; Match(T__4);
				State = 135; simpleAttribute();
				State = 136; Match(T__6);
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 137; alias();
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 140; Match(T__12);
				State = 141; Match(T__13);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 142; alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterWhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitWhere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 14, RULE_where);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode VALUE() { return GetToken(QueryBuilderQueriesParser.VALUE, 0); }
		public ITerminalNode NUMERIC() { return GetToken(QueryBuilderQueriesParser.NUMERIC, 0); }
		public LogicalExpressionContext[] logicalExpression() {
			return GetRuleContexts<LogicalExpressionContext>();
		}
		public LogicalExpressionContext logicalExpression(int i) {
			return GetRuleContext<LogicalExpressionContext>(i);
		}
		public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public OtherExpressionContext otherExpression() {
			return GetRuleContext<OtherExpressionContext>(0);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionList);
		int _la;
		try {
			int _alt;
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; simpleAttribute();
				State = 150; arithmeticExpression();
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 151; Match(VALUE);
					}
				}

				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMERIC) {
					{
					State = 154; Match(NUMERIC);
					}
				}

				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 157; logicalExpression();
						State = 158; expressionList();
						}
						} 
					}
					State = 164;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165; Match(T__4);
				State = 166; simpleAttribute();
				State = 167; otherExpression();
				State = 168; Match(T__6);
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 169; logicalExpression();
						State = 170; expressionList();
						}
						} 
					}
					State = 176;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				}
				break;
			case T__21:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; otherExpression();
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 178; logicalExpression();
						State = 179; expressionList();
						}
						} 
					}
					State = 185;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_arithmeticExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherExpressionContext : ParserRuleContext {
		public ITerminalNode[] NUMERIC() { return GetTokens(QueryBuilderQueriesParser.NUMERIC); }
		public ITerminalNode NUMERIC(int i) {
			return GetToken(QueryBuilderQueriesParser.NUMERIC, i);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ITerminalNode[] VALUE() { return GetTokens(QueryBuilderQueriesParser.VALUE); }
		public ITerminalNode VALUE(int i) {
			return GetToken(QueryBuilderQueriesParser.VALUE, i);
		}
		public OtherExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitOtherExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherExpressionContext otherExpression() {
		OtherExpressionContext _localctx = new OtherExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_otherExpression);
		int _la;
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190; Match(T__21);
				State = 191; Match(NUMERIC);
				State = 192; Match(T__22);
				State = 193; Match(NUMERIC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; Match(T__23);
				State = 195; Match(T__4);
				State = 196; query();
				State = 197; Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 199; Match(T__23);
				State = 200; Match(T__4);
				State = 201; Match(NUMERIC);
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 202; Match(T__5);
					State = 203; Match(NUMERIC);
					}
					}
					State = 208;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 209; Match(T__6);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 210; Match(T__23);
				State = 211; Match(T__4);
				State = 212; Match(VALUE);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 213; Match(T__5);
					State = 214; Match(VALUE);
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 220; Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 221; Match(T__24);
				State = 222; Match(T__4);
				State = 223; query();
				State = 224; Match(T__6);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 226; Match(T__24);
				State = 227; Match(T__4);
				State = 228; Match(NUMERIC);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 229; Match(T__5);
					State = 230; Match(NUMERIC);
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236; Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 237; Match(T__24);
				State = 238; Match(T__4);
				State = 239; Match(VALUE);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 240; Match(T__5);
					State = 241; Match(VALUE);
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 247; Match(T__6);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 248; Match(T__25);
				State = 249; Match(T__4);
				State = 250; query();
				State = 251; Match(T__6);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 253; Match(T__26);
				State = 254; Match(T__4);
				State = 255; query();
				State = 256; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			_la = TokenStream.LA(1);
			if ( !(_la==T__22 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupbyContext : ParserRuleContext {
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public GroupbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterGroupby(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitGroupby(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupbyContext groupby() {
		GroupbyContext _localctx = new GroupbyContext(Context, State);
		EnterRule(_localctx, 24, RULE_groupby);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; listOfAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingContext : ParserRuleContext {
		public AggregationFunctionContext aggregationFunction() {
			return GetRuleContext<AggregationFunctionContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode NUMERIC() { return GetToken(QueryBuilderQueriesParser.NUMERIC, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public HavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterHaving(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitHaving(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingContext having() {
		HavingContext _localctx = new HavingContext(Context, State);
		EnterRule(_localctx, 26, RULE_having);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; aggregationFunction();
				State = 265; arithmeticExpression();
				State = 266; Match(NUMERIC);
				}
				break;
			case T__4:
			case T__21:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public OrderbyContext[] orderby() {
			return GetRuleContexts<OrderbyContext>();
		}
		public OrderbyContext orderby(int i) {
			return GetRuleContext<OrderbyContext>(i);
		}
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterOrderby(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitOrderby(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 28, RULE_orderby);
		try {
			int _alt;
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; listOfAttributes();
				State = 272; Match(T__28);
				State = 277;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 273; Match(T__5);
						State = 274; orderby();
						}
						} 
					}
					State = 279;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; listOfAttributes();
				State = 281; Match(T__29);
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 282; Match(T__5);
						State = 283; orderby();
						}
						} 
					}
					State = 288;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return entity_sempred((EntityContext)_localctx, predIndex);
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '\x126', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\'', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x34', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', ';', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '>', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x42', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x45', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'L', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', 'O', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', 'T', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'W', '\v', '\x4', '\x5', '\x4', 'Y', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x61', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'h', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'q', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'x', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x7F', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x86', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x8D', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x92', '\n', '\b', '\x5', '\b', 
		'\x94', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x9B', '\n', '\n', '\x3', '\n', '\x5', '\n', 
		'\x9E', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\xA3', '\n', '\n', '\f', '\n', '\xE', '\n', '\xA6', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\xAF', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\xB2', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '\xB8', '\n', '\n', '\f', '\n', '\xE', '\n', '\xBB', '\v', 
		'\n', '\x5', '\n', '\xBD', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xCF', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xD2', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xDA', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xDD', '\v', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xEA', 
		'\n', '\f', '\f', '\f', '\xE', '\f', '\xED', '\v', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\xF5', '\n', '\f', '\f', '\f', '\xE', '\f', '\xF8', '\v', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\x105', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x110', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x116', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x119', '\v', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x11F', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x122', '\v', '\x10', '\x5', '\x10', '\x124', 
		'\n', '\x10', '\x3', '\x10', '\x2', '\x3', '\x4', '\x11', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', '\x2', '\x4', '\x4', '\x2', '\x5', '\x6', '\x11', 
		'\x17', '\x4', '\x2', '\x19', '\x19', '\x1E', '\x1E', '\x2', '\x144', 
		'\x2', ' ', '\x3', '\x2', '\x2', '\x2', '\x4', ',', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'X', '\x3', '\x2', '\x2', '\x2', '\b', '`', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'g', '\x3', '\x2', '\x2', '\x2', '\f', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x93', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x12', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x16', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x106', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x123', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', '\x3', 
		'\x2', '\x2', '!', '\"', '\x5', '\x4', '\x3', '\x2', '\"', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\b', '\x3', '\x1', '\x2', '$', '&', '\a', 
		'!', '\x2', '\x2', '%', '\'', '\a', '!', '\x2', '\x2', '&', '%', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '-', 
		'\x3', '\x2', '\x2', '\x2', '(', ')', '\a', '\a', '\x2', '\x2', ')', '*', 
		'\x5', '\x4', '\x3', '\x2', '*', '+', '\a', '\t', '\x2', '\x2', '+', '-', 
		'\x3', '\x2', '\x2', '\x2', ',', '#', '\x3', '\x2', '\x2', '\x2', ',', 
		'(', '\x3', '\x2', '\x2', '\x2', '-', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\f', '\x4', '\x2', '\x2', '/', '\x30', '\a', '\x4', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\x5', '\x2', '\x2', '\x31', '\x33', '\a', 
		'!', '\x2', '\x2', '\x32', '\x34', '\a', '!', '\x2', '\x2', '\x33', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x6', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\a', '\x2', '\x2', '\x37', '<', '\x5', 
		'\x4', '\x3', '\x2', '\x38', '\x39', '\a', '\b', '\x2', '\x2', '\x39', 
		';', '\x5', '\x4', '\x3', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\x3', '\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\t', '\x2', '\x2', 
		'@', '\x42', '\x3', '\x2', '\x2', '\x2', '\x41', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'Y', '\x5', '\b', '\x5', '\x2', 'G', 'Y', '\x5', '\n', 
		'\x6', '\x2', 'H', 'M', '\x5', '\xE', '\b', '\x2', 'I', 'J', '\a', '\b', 
		'\x2', '\x2', 'J', 'L', '\x5', '\xE', '\b', '\x2', 'K', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'U', '\x5', '\n', 
		'\x6', '\x2', 'Q', 'R', '\a', '\b', '\x2', '\x2', 'R', 'T', '\x5', '\xE', 
		'\b', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x46', '\x3', '\x2', '\x2', '\x2', 'X', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'H', '\x3', '\x2', '\x2', '\x2', 'X', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\a', '\x3', '\x2', '\x2', '\x2', 'Z', '[', 
		'\a', '!', '\x2', '\x2', '[', '\\', '\a', '\n', '\x2', '\x2', '\\', '\x61', 
		'\a', '!', '\x2', '\x2', ']', '^', '\a', '!', '\x2', '\x2', '^', '_', 
		'\a', '\n', '\x2', '\x2', '_', '\x61', '\a', '!', '\x2', '\x2', '`', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '`', ']', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x62', 'h', '\x5', '\b', '\x5', '\x2', 
		'\x63', '\x64', '\x5', '\b', '\x5', '\x2', '\x64', '\x65', '\a', '\b', 
		'\x2', '\x2', '\x65', '\x66', '\x5', '\n', '\x6', '\x2', '\x66', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x62', '\x3', '\x2', '\x2', '\x2', 'g', 
		'\x63', '\x3', '\x2', '\x2', '\x2', 'h', '\v', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\a', '!', '\x2', '\x2', 'j', '\r', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\a', '\v', '\x2', '\x2', 'l', 'm', '\a', '\a', '\x2', '\x2', 
		'm', 'n', '\x5', '\b', '\x5', '\x2', 'n', 'p', '\a', '\t', '\x2', '\x2', 
		'o', 'q', '\x5', '\f', '\a', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', '\x94', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '\f', '\x2', '\x2', 's', 't', '\a', '\a', '\x2', 
		'\x2', 't', 'u', '\x5', '\b', '\x5', '\x2', 'u', 'w', '\a', '\t', '\x2', 
		'\x2', 'v', 'x', '\x5', '\f', '\a', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', '\x94', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\a', '\r', '\x2', '\x2', 'z', '{', '\a', '\a', 
		'\x2', '\x2', '{', '|', '\x5', '\b', '\x5', '\x2', '|', '~', '\a', '\t', 
		'\x2', '\x2', '}', '\x7F', '\x5', '\f', '\a', '\x2', '~', '}', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\xE', '\x2', 
		'\x2', '\x81', '\x82', '\a', '\a', '\x2', '\x2', '\x82', '\x83', '\x5', 
		'\b', '\x5', '\x2', '\x83', '\x85', '\a', '\t', '\x2', '\x2', '\x84', 
		'\x86', '\x5', '\f', '\a', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\xF', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\a', '\x2', '\x2', '\x89', '\x8A', '\x5', '\b', '\x5', 
		'\x2', '\x8A', '\x8C', '\a', '\t', '\x2', '\x2', '\x8B', '\x8D', '\x5', 
		'\f', '\a', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\a', '\xF', '\x2', '\x2', '\x8F', '\x91', '\a', 
		'\x10', '\x2', '\x2', '\x90', '\x92', '\x5', '\f', '\a', '\x2', '\x91', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x94', '\x3', '\x2', '\x2', '\x2', '\x93', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x93', 'r', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x93', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x87', '\x3', '\x2', '\x2', '\x2', '\x93', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\xF', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x5', '\x12', '\n', '\x2', '\x96', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x5', '\b', '\x5', '\x2', '\x98', '\x9A', '\x5', 
		'\x14', '\v', '\x2', '\x99', '\x9B', '\a', '#', '\x2', '\x2', '\x9A', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\a', 
		'$', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '\x18', '\r', '\x2', '\xA0', '\xA1', '\x5', 
		'\x12', '\n', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\a', '\x2', 
		'\x2', '\xA8', '\xA9', '\x5', '\b', '\x5', '\x2', '\xA9', '\xAA', '\x5', 
		'\x16', '\f', '\x2', '\xAA', '\xB0', '\a', '\t', '\x2', '\x2', '\xAB', 
		'\xAC', '\x5', '\x18', '\r', '\x2', '\xAC', '\xAD', '\x5', '\x12', '\n', 
		'\x2', '\xAD', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB9', '\x5', '\x16', '\f', '\x2', '\xB4', 
		'\xB5', '\x5', '\x18', '\r', '\x2', '\xB5', '\xB6', '\x5', '\x12', '\n', 
		'\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\x97', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\x13', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\t', 
		'\x2', '\x2', '\x2', '\xBF', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\a', '\x18', '\x2', '\x2', '\xC1', '\xC2', '\a', '$', '\x2', 
		'\x2', '\xC2', '\xC3', '\a', '\x19', '\x2', '\x2', '\xC3', '\x105', '\a', 
		'$', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x1A', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\a', '\x2', '\x2', '\xC6', '\xC7', '\x5', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\t', '\x2', '\x2', '\xC8', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x1A', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '\a', '\x2', '\x2', '\xCB', '\xD0', '\a', '$', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', '\b', '\x2', '\x2', '\xCD', '\xCF', '\a', '$', '\x2', 
		'\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\x105', '\a', 
		'\t', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x1A', '\x2', '\x2', '\xD5', 
		'\xD6', '\a', '\a', '\x2', '\x2', '\xD6', '\xDB', '\a', '#', '\x2', '\x2', 
		'\xD7', '\xD8', '\a', '\b', '\x2', '\x2', '\xD8', '\xDA', '\a', '#', '\x2', 
		'\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x105', '\a', 
		'\t', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x1B', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\a', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\a', '\t', '\x2', '\x2', '\xE3', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x1B', '\x2', '\x2', '\xE5', 
		'\xE6', '\a', '\a', '\x2', '\x2', '\xE6', '\xEB', '\a', '$', '\x2', '\x2', 
		'\xE7', '\xE8', '\a', '\b', '\x2', '\x2', '\xE8', '\xEA', '\a', '$', '\x2', 
		'\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x105', '\a', 
		'\t', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x1B', '\x2', '\x2', '\xF0', 
		'\xF1', '\a', '\a', '\x2', '\x2', '\xF1', '\xF6', '\a', '#', '\x2', '\x2', 
		'\xF2', '\xF3', '\a', '\b', '\x2', '\x2', '\xF3', '\xF5', '\a', '#', '\x2', 
		'\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\x105', '\a', 
		'\t', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x1C', '\x2', '\x2', '\xFB', 
		'\xFC', '\a', '\a', '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', '\t', '\x2', '\x2', '\xFE', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\x1D', '\x2', '\x2', '\x100', 
		'\x101', '\a', '\a', '\x2', '\x2', '\x101', '\x102', '\x5', '\x2', '\x2', 
		'\x2', '\x102', '\x103', '\a', '\t', '\x2', '\x2', '\x103', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\xC0', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\x104', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x104', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\x104', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x105', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x107', '\t', '\x3', '\x2', '\x2', '\x107', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x5', '\n', '\x6', 
		'\x2', '\x109', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x5', '\xE', '\b', '\x2', '\x10B', '\x10C', '\x5', '\x14', '\v', '\x2', 
		'\x10C', '\x10D', '\a', '$', '\x2', '\x2', '\x10D', '\x110', '\x3', '\x2', 
		'\x2', '\x2', '\x10E', '\x110', '\x5', '\x12', '\n', '\x2', '\x10F', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x5', 
		'\n', '\x6', '\x2', '\x112', '\x117', '\a', '\x1F', '\x2', '\x2', '\x113', 
		'\x114', '\a', '\b', '\x2', '\x2', '\x114', '\x116', '\x5', '\x1E', '\x10', 
		'\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x116', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11B', '\x5', '\n', '\x6', '\x2', '\x11B', '\x120', '\a', ' ', '\x2', 
		'\x2', '\x11C', '\x11D', '\a', '\b', '\x2', '\x2', '\x11D', '\x11F', '\x5', 
		'\x1E', '\x10', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x111', '\x3', '\x2', '\x2', '\x2', '\x123', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', 
		'&', ',', '\x33', '<', '\x43', 'M', 'U', 'X', '`', 'g', 'p', 'w', '~', 
		'\x85', '\x8C', '\x91', '\x93', '\x9A', '\x9D', '\xA4', '\xB0', '\xB9', 
		'\xBC', '\xD0', '\xDB', '\xEB', '\xF6', '\x104', '\x10F', '\x117', '\x120', 
		'\x123',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryBuilder.Parser
