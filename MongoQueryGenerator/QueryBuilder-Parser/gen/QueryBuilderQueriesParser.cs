//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/daniellucredio/GitProjects/mongoQueryGenerator/MongoQueryGenerator/QueryBuilder-Parser/QueryBuilderQueries.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryBuilder.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QueryBuilderQueriesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, NAME=37, INTEGER=38, 
		VALUE=39, NUMERIC=40, WS=41;
	public const int
		RULE_query = 0, RULE_entity = 1, RULE_select = 2, RULE_attributeOrFunction = 3, 
		RULE_listOfAttributes = 4, RULE_simpleAttribute = 5, RULE_alias = 6, RULE_aggregationFunction = 7, 
		RULE_where = 8, RULE_expressionList = 9, RULE_arithmeticExpression = 10, 
		RULE_otherExpression = 11, RULE_logicalExpression = 12, RULE_groupby = 13, 
		RULE_having = 14, RULE_orderby = 15;
	public static readonly string[] ruleNames = {
		"query", "entity", "select", "attributeOrFunction", "listOfAttributes", 
		"simpleAttribute", "alias", "aggregationFunction", "where", "expressionList", 
		"arithmeticExpression", "otherExpression", "logicalExpression", "groupby", 
		"having", "orderby"
	};

	private static readonly string[] _LiteralNames = {
		null, "'from'", "'select'", "'where'", "'group by'", "'having'", "'order by'", 
		"'rjoin'", "'<'", "'>'", "'('", "','", "')'", "'*'", "'.'", "'avg'", "'max'", 
		"'min'", "'sum'", "'count'", "'(*)'", "'='", "'<>'", "'>='", "'<='", "'like'", 
		"'is not null'", "'is null'", "'between'", "'and'", "'not in'", "'in'", 
		"'not exists'", "'exists'", "'or'", "'asc'", "'desc'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "NAME", "INTEGER", "VALUE", "NUMERIC", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryBuilderQueries.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryBuilderQueriesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryBuilderQueriesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryBuilderQueriesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public GroupbyContext groupby() {
			return GetRuleContext<GroupbyContext>(0);
		}
		public HavingContext having() {
			return GetRuleContext<HavingContext>(0);
		}
		public OrderbyContext orderby() {
			return GetRuleContext<OrderbyContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(T__0);
			State = 33; entity(0);
			State = 34; Match(T__1);
			State = 35; select();
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 36; Match(T__2);
				State = 37; where();
				}
			}

			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 40; Match(T__3);
				State = 41; groupby();
				}
			}

			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 44; Match(T__4);
				State = 45; having();
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 48; Match(T__5);
				State = 49; orderby();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public QueryBuilder.Operation.Arguments.QueryableEntity qEntity;
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	 
		public EntityContext() { }
		public virtual void CopyFrom(EntityContext context) {
			base.CopyFrom(context);
			this.qEntity = context.qEntity;
		}
	}
	public partial class SimpleEntityContext : EntityContext {
		public IToken simpleEntityName;
		public IToken simpleEntityAlias;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public SimpleEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSimpleEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSimpleEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputedEntityContext : EntityContext {
		public EntityContext computedEntityLeft;
		public IToken computedEntityRelationshipName;
		public IToken computedEntityRelationshipAlias;
		public EntityContext _entity;
		public IList<EntityContext> _computedEntityRight = new List<EntityContext>();
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public ComputedEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterComputedEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitComputedEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisEntityContext : EntityContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ParenthesisEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterParenthesisEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitParenthesisEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		return entity(0);
	}

	private EntityContext entity(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EntityContext _localctx = new EntityContext(Context, _parentState);
		EntityContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_entity, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				_localctx = new SimpleEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 53; ((SimpleEntityContext)_localctx).simpleEntityName = Match(NAME);
				State = 55;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 54; ((SimpleEntityContext)_localctx).simpleEntityAlias = Match(NAME);
					}
					break;
				}
				}
				break;
			case T__9:
				{
				_localctx = new ParenthesisEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; Match(T__9);
				State = 58; entity(0);
				State = 59; Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 84;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ComputedEntityContext(new EntityContext(_parentctx, _parentState));
					((ComputedEntityContext)_localctx).computedEntityLeft = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_entity);
					State = 63;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 64; Match(T__6);
					State = 65; Match(T__7);
					State = 66; ((ComputedEntityContext)_localctx).computedEntityRelationshipName = Match(NAME);
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NAME) {
						{
						State = 67; ((ComputedEntityContext)_localctx).computedEntityRelationshipAlias = Match(NAME);
						}
					}

					State = 70; Match(T__8);
					State = 71; Match(T__9);
					State = 72; ((ComputedEntityContext)_localctx)._entity = entity(0);
					((ComputedEntityContext)_localctx)._computedEntityRight.Add(((ComputedEntityContext)_localctx)._entity);
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__10) {
						{
						{
						State = 73; Match(T__10);
						State = 74; ((ComputedEntityContext)_localctx)._entity = entity(0);
						((ComputedEntityContext)_localctx)._computedEntityRight.Add(((ComputedEntityContext)_localctx)._entity);
						}
						}
						State = 79;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 80; Match(T__11);
					}
					} 
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
	 
		public SelectContext() { }
		public virtual void CopyFrom(SelectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectAllContext : SelectContext {
		public SelectAllContext(SelectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSelectAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSelectAll(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectAttributeOrFunctionContext : SelectContext {
		public AttributeOrFunctionContext[] attributeOrFunction() {
			return GetRuleContexts<AttributeOrFunctionContext>();
		}
		public AttributeOrFunctionContext attributeOrFunction(int i) {
			return GetRuleContext<AttributeOrFunctionContext>(i);
		}
		public SelectAttributeOrFunctionContext(SelectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSelectAttributeOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSelectAttributeOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAttributeOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 4, RULE_select);
		int _la;
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				_localctx = new SelectAllContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; Match(T__12);
				}
				break;
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case NAME:
				_localctx = new SelectAttributeOrFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; attributeOrFunction();
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 89; Match(T__10);
					State = 90; attributeOrFunction();
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeOrFunctionContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AggregationFunctionContext aggregationFunction() {
			return GetRuleContext<AggregationFunctionContext>(0);
		}
		public AttributeOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeOrFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterAttributeOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitAttributeOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeOrFunctionContext attributeOrFunction() {
		AttributeOrFunctionContext _localctx = new AttributeOrFunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_attributeOrFunction);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; simpleAttribute();
				}
				break;
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; aggregationFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOfAttributesContext : ParserRuleContext {
		public SimpleAttributeContext[] simpleAttribute() {
			return GetRuleContexts<SimpleAttributeContext>();
		}
		public SimpleAttributeContext simpleAttribute(int i) {
			return GetRuleContext<SimpleAttributeContext>(i);
		}
		public ListOfAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOfAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterListOfAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitListOfAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOfAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOfAttributesContext listOfAttributes() {
		ListOfAttributesContext _localctx = new ListOfAttributesContext(Context, State);
		EnterRule(_localctx, 8, RULE_listOfAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; simpleAttribute();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				State = 103; Match(T__10);
				State = 104; simpleAttribute();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleAttributeContext : ParserRuleContext {
		public IToken entityName;
		public IToken attribute;
		public IToken relationshipName;
		public ITerminalNode[] NAME() { return GetTokens(QueryBuilderQueriesParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(QueryBuilderQueriesParser.NAME, i);
		}
		public SimpleAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSimpleAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSimpleAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleAttributeContext simpleAttribute() {
		SimpleAttributeContext _localctx = new SimpleAttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_simpleAttribute);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; _localctx.entityName = Match(NAME);
				State = 111; Match(T__13);
				State = 112; _localctx.attribute = Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; _localctx.relationshipName = Match(NAME);
				State = 114; Match(T__13);
				State = 115; _localctx.attribute = Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public IToken description;
		public ITerminalNode NAME() { return GetToken(QueryBuilderQueriesParser.NAME, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 12, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; _localctx.description = Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregationFunctionContext : ParserRuleContext {
		public AggregationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregationFunction; } }
	 
		public AggregationFunctionContext() { }
		public virtual void CopyFrom(AggregationFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CountAllFunctionContext : AggregationFunctionContext {
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public CountAllFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterCountAllFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitCountAllFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountAllFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public CountFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterCountFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitCountFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public SumFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterSumFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitSumFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public MinFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterMinFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitMinFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public AverageFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterAverageFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitAverageFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxFunctionContext : AggregationFunctionContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public MaxFunctionContext(AggregationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterMaxFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitMaxFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregationFunctionContext aggregationFunction() {
		AggregationFunctionContext _localctx = new AggregationFunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_aggregationFunction);
		int _la;
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new AverageFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; Match(T__14);
				State = 121; Match(T__9);
				State = 122; simpleAttribute();
				State = 123; Match(T__11);
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 124; alias();
					}
				}

				}
				break;
			case 2:
				_localctx = new MaxFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(T__15);
				State = 128; Match(T__9);
				State = 129; simpleAttribute();
				State = 130; Match(T__11);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 131; alias();
					}
				}

				}
				break;
			case 3:
				_localctx = new MinFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; Match(T__16);
				State = 135; Match(T__9);
				State = 136; simpleAttribute();
				State = 137; Match(T__11);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 138; alias();
					}
				}

				}
				break;
			case 4:
				_localctx = new SumFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 141; Match(T__17);
				State = 142; Match(T__9);
				State = 143; simpleAttribute();
				State = 144; Match(T__11);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 145; alias();
					}
				}

				}
				break;
			case 5:
				_localctx = new CountFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 148; Match(T__18);
				State = 149; Match(T__9);
				State = 150; simpleAttribute();
				State = 151; Match(T__11);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 152; alias();
					}
				}

				}
				break;
			case 6:
				_localctx = new CountAllFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 155; Match(T__18);
				State = 156; Match(T__19);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 157; alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterWhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitWhere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 16, RULE_where);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public SimpleAttributeContext simpleAttribute() {
			return GetRuleContext<SimpleAttributeContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode VALUE() { return GetToken(QueryBuilderQueriesParser.VALUE, 0); }
		public ITerminalNode NUMERIC() { return GetToken(QueryBuilderQueriesParser.NUMERIC, 0); }
		public LogicalExpressionContext[] logicalExpression() {
			return GetRuleContexts<LogicalExpressionContext>();
		}
		public LogicalExpressionContext logicalExpression(int i) {
			return GetRuleContext<LogicalExpressionContext>(i);
		}
		public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public OtherExpressionContext otherExpression() {
			return GetRuleContext<OtherExpressionContext>(0);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 18, RULE_expressionList);
		int _la;
		try {
			int _alt;
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164; simpleAttribute();
				State = 165; arithmeticExpression();
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 166; Match(VALUE);
					}
				}

				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMERIC) {
					{
					State = 169; Match(NUMERIC);
					}
				}

				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 172; logicalExpression();
						State = 173; expressionList();
						}
						} 
					}
					State = 179;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(T__9);
				State = 181; simpleAttribute();
				State = 182; otherExpression();
				State = 183; Match(T__11);
				State = 189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 184; logicalExpression();
						State = 185; expressionList();
						}
						} 
					}
					State = 191;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				}
				break;
			case T__27:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192; otherExpression();
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 193; logicalExpression();
						State = 194; expressionList();
						}
						} 
					}
					State = 200;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_arithmeticExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherExpressionContext : ParserRuleContext {
		public ITerminalNode[] NUMERIC() { return GetTokens(QueryBuilderQueriesParser.NUMERIC); }
		public ITerminalNode NUMERIC(int i) {
			return GetToken(QueryBuilderQueriesParser.NUMERIC, i);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ITerminalNode[] VALUE() { return GetTokens(QueryBuilderQueriesParser.VALUE); }
		public ITerminalNode VALUE(int i) {
			return GetToken(QueryBuilderQueriesParser.VALUE, i);
		}
		public OtherExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterOtherExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitOtherExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherExpressionContext otherExpression() {
		OtherExpressionContext _localctx = new OtherExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_otherExpression);
		int _la;
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; Match(T__27);
				State = 206; Match(NUMERIC);
				State = 207; Match(T__28);
				State = 208; Match(NUMERIC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; Match(T__29);
				State = 210; Match(T__9);
				State = 211; query();
				State = 212; Match(T__11);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214; Match(T__29);
				State = 215; Match(T__9);
				State = 216; Match(NUMERIC);
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 217; Match(T__10);
					State = 218; Match(NUMERIC);
					}
					}
					State = 223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 224; Match(T__11);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 225; Match(T__29);
				State = 226; Match(T__9);
				State = 227; Match(VALUE);
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 228; Match(T__10);
					State = 229; Match(VALUE);
					}
					}
					State = 234;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 235; Match(T__11);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236; Match(T__30);
				State = 237; Match(T__9);
				State = 238; query();
				State = 239; Match(T__11);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 241; Match(T__30);
				State = 242; Match(T__9);
				State = 243; Match(NUMERIC);
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 244; Match(T__10);
					State = 245; Match(NUMERIC);
					}
					}
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 251; Match(T__11);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 252; Match(T__30);
				State = 253; Match(T__9);
				State = 254; Match(VALUE);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 255; Match(T__10);
					State = 256; Match(VALUE);
					}
					}
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 262; Match(T__11);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 263; Match(T__31);
				State = 264; Match(T__9);
				State = 265; query();
				State = 266; Match(T__11);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 268; Match(T__32);
				State = 269; Match(T__9);
				State = 270; query();
				State = 271; Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_la = TokenStream.LA(1);
			if ( !(_la==T__28 || _la==T__33) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupbyContext : ParserRuleContext {
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public GroupbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterGroupby(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitGroupby(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupbyContext groupby() {
		GroupbyContext _localctx = new GroupbyContext(Context, State);
		EnterRule(_localctx, 26, RULE_groupby);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; listOfAttributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingContext : ParserRuleContext {
		public AggregationFunctionContext aggregationFunction() {
			return GetRuleContext<AggregationFunctionContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode NUMERIC() { return GetToken(QueryBuilderQueriesParser.NUMERIC, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public HavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterHaving(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitHaving(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingContext having() {
		HavingContext _localctx = new HavingContext(Context, State);
		EnterRule(_localctx, 28, RULE_having);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; aggregationFunction();
				State = 280; arithmeticExpression();
				State = 281; Match(NUMERIC);
				}
				break;
			case T__9:
			case T__27:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		public ListOfAttributesContext listOfAttributes() {
			return GetRuleContext<ListOfAttributesContext>(0);
		}
		public OrderbyContext[] orderby() {
			return GetRuleContexts<OrderbyContext>();
		}
		public OrderbyContext orderby(int i) {
			return GetRuleContext<OrderbyContext>(i);
		}
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.EnterOrderby(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderQueriesListener typedListener = listener as IQueryBuilderQueriesListener;
			if (typedListener != null) typedListener.ExitOrderby(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderQueriesVisitor<TResult> typedVisitor = visitor as IQueryBuilderQueriesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 30, RULE_orderby);
		try {
			int _alt;
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286; listOfAttributes();
				State = 287; Match(T__34);
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 288; Match(T__10);
						State = 289; orderby();
						}
						} 
					}
					State = 294;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; listOfAttributes();
				State = 296; Match(T__35);
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 297; Match(T__10);
						State = 298; orderby();
						}
						} 
					}
					State = 303;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return entity_sempred((EntityContext)_localctx, predIndex);
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x135', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', ')', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '-', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x31', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x35', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', ':', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '@', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'G', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', 'N', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'Q', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'U', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', 'X', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '^', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\x61', '\v', '\x4', '\x5', '\x4', '\x63', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'g', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'l', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'o', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'w', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x80', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x87', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x8E', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x95', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x9C', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xA1', '\n', 
		'\t', '\x5', '\t', '\xA3', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xAA', '\n', '\v', '\x3', 
		'\v', '\x5', '\v', '\xAD', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\xB2', '\n', '\v', '\f', '\v', '\xE', '\v', '\xB5', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xBE', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\xC1', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '\xC7', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\xCA', '\v', '\v', '\x5', '\v', '\xCC', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xDE', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\xE1', '\v', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\xE9', '\n', '\r', '\f', '\r', '\xE', '\r', '\xEC', '\v', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\xF9', '\n', '\r', '\f', '\r', '\xE', '\r', '\xFC', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\x104', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\x107', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\x114', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x11F', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x125', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x128', '\v', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x12E', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x131', '\v', '\x11', 
		'\x5', '\x11', '\x133', '\n', '\x11', '\x3', '\x11', '\x2', '\x3', '\x4', 
		'\x12', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\x4', '\x4', 
		'\x2', '\n', '\v', '\x17', '\x1D', '\x4', '\x2', '\x1F', '\x1F', '$', 
		'$', '\x2', '\x154', '\x2', '\"', '\x3', '\x2', '\x2', '\x2', '\x4', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x66', '\x3', '\x2', '\x2', '\x2', '\n', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'v', '\x3', '\x2', '\x2', '\x2', '\xE', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x18', '\x113', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x115', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x132', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\x3', '\x2', 
		'\x2', '#', '$', '\x5', '\x4', '\x3', '\x2', '$', '%', '\a', '\x4', '\x2', 
		'\x2', '%', '(', '\x5', '\x6', '\x4', '\x2', '&', '\'', '\a', '\x5', '\x2', 
		'\x2', '\'', ')', '\x5', '\x12', '\n', '\x2', '(', '&', '\x3', '\x2', 
		'\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', ',', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\a', '\x6', '\x2', '\x2', '+', '-', '\x5', '\x1C', 
		'\xF', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', 
		'\a', '\x2', '\x2', '/', '\x31', '\x5', '\x1E', '\x10', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x34', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\b', '\x2', '\x2', '\x33', '\x35', '\x5', ' ', '\x11', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x3', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\b', 
		'\x3', '\x1', '\x2', '\x37', '\x39', '\a', '\'', '\x2', '\x2', '\x38', 
		':', '\a', '\'', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '@', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\a', '\f', '\x2', '\x2', '<', '=', '\x5', '\x4', '\x3', 
		'\x2', '=', '>', '\a', '\xE', '\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x36', '\x3', '\x2', '\x2', '\x2', '?', ';', '\x3', '\x2', 
		'\x2', '\x2', '@', 'V', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\f', 
		'\x4', '\x2', '\x2', '\x42', '\x43', '\a', '\t', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\n', '\x2', '\x2', '\x44', '\x46', '\a', '\'', '\x2', '\x2', 
		'\x45', 'G', '\a', '\'', '\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\a', '\v', '\x2', '\x2', 'I', 'J', '\a', '\f', 
		'\x2', '\x2', 'J', 'O', '\x5', '\x4', '\x3', '\x2', 'K', 'L', '\a', '\r', 
		'\x2', '\x2', 'L', 'N', '\x5', '\x4', '\x3', '\x2', 'M', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\xE', 
		'\x2', '\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', '\x41', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'\x63', '\a', '\xF', '\x2', '\x2', 'Z', '_', '\x5', '\b', '\x5', '\x2', 
		'[', '\\', '\a', '\r', '\x2', '\x2', '\\', '^', '\x5', '\b', '\x5', '\x2', 
		']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x62', 'Y', '\x3', '\x2', '\x2', '\x2', '\x62', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\a', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'g', '\x5', '\f', '\a', '\x2', '\x65', 'g', '\x5', '\x10', '\t', '\x2', 
		'\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\t', '\x3', '\x2', '\x2', '\x2', 'h', 'm', '\x5', 
		'\f', '\a', '\x2', 'i', 'j', '\a', '\r', '\x2', '\x2', 'j', 'l', '\x5', 
		'\f', '\a', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'n', '\v', '\x3', '\x2', '\x2', '\x2', 'o', 'm', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\'', '\x2', '\x2', 'q', 'r', 
		'\a', '\x10', '\x2', '\x2', 'r', 'w', '\a', '\'', '\x2', '\x2', 's', 't', 
		'\a', '\'', '\x2', '\x2', 't', 'u', '\a', '\x10', '\x2', '\x2', 'u', 'w', 
		'\a', '\'', '\x2', '\x2', 'v', 'p', '\x3', '\x2', '\x2', '\x2', 'v', 's', 
		'\x3', '\x2', '\x2', '\x2', 'w', '\r', '\x3', '\x2', '\x2', '\x2', 'x', 
		'y', '\a', '\'', '\x2', '\x2', 'y', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\a', '\x11', '\x2', '\x2', '{', '|', '\a', '\f', '\x2', '\x2', 
		'|', '}', '\x5', '\f', '\a', '\x2', '}', '\x7F', '\a', '\xE', '\x2', '\x2', 
		'~', '\x80', '\x5', '\xE', '\b', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\x12', '\x2', '\x2', '\x82', 
		'\x83', '\a', '\f', '\x2', '\x2', '\x83', '\x84', '\x5', '\f', '\a', '\x2', 
		'\x84', '\x86', '\a', '\xE', '\x2', '\x2', '\x85', '\x87', '\x5', '\xE', 
		'\b', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\a', '\x13', '\x2', '\x2', '\x89', '\x8A', '\a', '\f', 
		'\x2', '\x2', '\x8A', '\x8B', '\x5', '\f', '\a', '\x2', '\x8B', '\x8D', 
		'\a', '\xE', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\xE', '\b', '\x2', 
		'\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\a', '\x14', '\x2', '\x2', '\x90', '\x91', '\a', '\f', '\x2', '\x2', 
		'\x91', '\x92', '\x5', '\f', '\a', '\x2', '\x92', '\x94', '\a', '\xE', 
		'\x2', '\x2', '\x93', '\x95', '\x5', '\xE', '\b', '\x2', '\x94', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\x15', 
		'\x2', '\x2', '\x97', '\x98', '\a', '\f', '\x2', '\x2', '\x98', '\x99', 
		'\x5', '\f', '\a', '\x2', '\x99', '\x9B', '\a', '\xE', '\x2', '\x2', '\x9A', 
		'\x9C', '\x5', '\xE', '\b', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x15', '\x2', '\x2', '\x9E', 
		'\xA0', '\a', '\x16', '\x2', '\x2', '\x9F', '\xA1', '\x5', '\xE', '\b', 
		'\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'z', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\x88', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\x96', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x5', '\x14', '\v', '\x2', '\xA5', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\f', '\a', '\x2', '\xA7', 
		'\xA9', '\x5', '\x16', '\f', '\x2', '\xA8', '\xAA', '\a', ')', '\x2', 
		'\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAD', '\a', '*', '\x2', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\x1A', '\xE', '\x2', '\xAF', 
		'\xB0', '\x5', '\x14', '\v', '\x2', '\xB0', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', 
		'\f', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\f', '\a', '\x2', '\xB8', 
		'\xB9', '\x5', '\x18', '\r', '\x2', '\xB9', '\xBF', '\a', '\xE', '\x2', 
		'\x2', '\xBA', '\xBB', '\x5', '\x1A', '\xE', '\x2', '\xBB', '\xBC', '\x5', 
		'\x14', '\v', '\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC8', '\x5', '\x18', '\r', 
		'\x2', '\xC3', '\xC4', '\x5', '\x1A', '\xE', '\x2', '\xC4', '\xC5', '\x5', 
		'\x14', '\v', '\x2', '\xC5', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\t', '\x2', '\x2', '\x2', '\xCE', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\a', '\x1E', '\x2', '\x2', '\xD0', '\xD1', '\a', 
		'*', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x1F', '\x2', '\x2', '\xD2', 
		'\x114', '\a', '*', '\x2', '\x2', '\xD3', '\xD4', '\a', ' ', '\x2', '\x2', 
		'\xD4', '\xD5', '\a', '\f', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x2', 
		'\x2', '\x2', '\xD6', '\xD7', '\a', '\xE', '\x2', '\x2', '\xD7', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', ' ', '\x2', '\x2', '\xD9', 
		'\xDA', '\a', '\f', '\x2', '\x2', '\xDA', '\xDF', '\a', '*', '\x2', '\x2', 
		'\xDB', '\xDC', '\a', '\r', '\x2', '\x2', '\xDC', '\xDE', '\a', '*', '\x2', 
		'\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x114', '\a', 
		'\xE', '\x2', '\x2', '\xE3', '\xE4', '\a', ' ', '\x2', '\x2', '\xE4', 
		'\xE5', '\a', '\f', '\x2', '\x2', '\xE5', '\xEA', '\a', ')', '\x2', '\x2', 
		'\xE6', '\xE7', '\a', '\r', '\x2', '\x2', '\xE7', '\xE9', '\a', ')', '\x2', 
		'\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\x114', '\a', 
		'\xE', '\x2', '\x2', '\xEE', '\xEF', '\a', '!', '\x2', '\x2', '\xEF', 
		'\xF0', '\a', '\f', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\x2', '\x2', 
		'\x2', '\xF1', '\xF2', '\a', '\xE', '\x2', '\x2', '\xF2', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', '!', '\x2', '\x2', '\xF4', 
		'\xF5', '\a', '\f', '\x2', '\x2', '\xF5', '\xFA', '\a', '*', '\x2', '\x2', 
		'\xF6', '\xF7', '\a', '\r', '\x2', '\x2', '\xF7', '\xF9', '\a', '*', '\x2', 
		'\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x114', '\a', 
		'\xE', '\x2', '\x2', '\xFE', '\xFF', '\a', '!', '\x2', '\x2', '\xFF', 
		'\x100', '\a', '\f', '\x2', '\x2', '\x100', '\x105', '\a', ')', '\x2', 
		'\x2', '\x101', '\x102', '\a', '\r', '\x2', '\x2', '\x102', '\x104', '\a', 
		')', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x114', '\a', '\xE', '\x2', '\x2', '\x109', '\x10A', '\a', '\"', 
		'\x2', '\x2', '\x10A', '\x10B', '\a', '\f', '\x2', '\x2', '\x10B', '\x10C', 
		'\x5', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', '\xE', '\x2', '\x2', 
		'\x10D', '\x114', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\a', 
		'#', '\x2', '\x2', '\x10F', '\x110', '\a', '\f', '\x2', '\x2', '\x110', 
		'\x111', '\x5', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', '\xE', '\x2', 
		'\x2', '\x112', '\x114', '\x3', '\x2', '\x2', '\x2', '\x113', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x113', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\x113', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x113', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x109', '\x3', '\x2', '\x2', '\x2', '\x113', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x19', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x116', '\t', '\x3', '\x2', '\x2', '\x116', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\x5', '\n', '\x6', '\x2', '\x118', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11A', '\x5', '\x10', '\t', '\x2', '\x11A', 
		'\x11B', '\x5', '\x16', '\f', '\x2', '\x11B', '\x11C', '\a', '*', '\x2', 
		'\x2', '\x11C', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11F', 
		'\x5', '\x14', '\v', '\x2', '\x11E', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x121', '\x5', '\n', '\x6', '\x2', '\x121', 
		'\x126', '\a', '%', '\x2', '\x2', '\x122', '\x123', '\a', '\r', '\x2', 
		'\x2', '\x123', '\x125', '\x5', ' ', '\x11', '\x2', '\x124', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x133', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x5', '\n', '\x6', 
		'\x2', '\x12A', '\x12F', '\a', '&', '\x2', '\x2', '\x12B', '\x12C', '\a', 
		'\r', '\x2', '\x2', '\x12C', '\x12E', '\x5', ' ', '\x11', '\x2', '\x12D', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x129', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'!', '\x3', '\x2', '\x2', '\x2', '&', '(', ',', '\x30', '\x34', '\x39', 
		'?', '\x46', 'O', 'V', '_', '\x62', '\x66', 'm', 'v', '\x7F', '\x86', 
		'\x8D', '\x94', '\x9B', '\xA0', '\xA2', '\xA9', '\xAC', '\xB3', '\xBF', 
		'\xC8', '\xCB', '\xDF', '\xEA', '\xFA', '\x105', '\x113', '\x11E', '\x126', 
		'\x12F', '\x132',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryBuilder.Parser
