//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/daniellucredio/GitProjects/mongoQueryGenerator/MongoQueryGenerator/QueryBuilder-Parser/QueryBuilderMapping.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryBuilder.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QueryBuilderMappingParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, CARDINALITY_ITEM=19, ID=20, STRING=21, DIVIDER=22, WS=23;
	public const int
		RULE_program = 0, RULE_ermodel = 1, RULE_erelement = 2, RULE_entity = 3, 
		RULE_relationship = 4, RULE_relationshipEnd = 5, RULE_attribute = 6, RULE_mongoschema = 7, 
		RULE_collection = 8, RULE_erRefs = 9, RULE_erRef = 10, RULE_field = 11, 
		RULE_fieldType = 12, RULE_simpleType = 13, RULE_complexType = 14, RULE_erAttributeRef = 15;
	public static readonly string[] ruleNames = {
		"program", "ermodel", "erelement", "entity", "relationship", "relationshipEnd", 
		"attribute", "mongoschema", "collection", "erRefs", "erRef", "field", 
		"fieldType", "simpleType", "complexType", "erAttributeRef"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Solution'", "':'", "'Description'", "'Version'", "'ERModel'", 
		"'MongoDBSchema'", "'{'", "'}'", "'('", "','", "')'", "'>'", "'[]'", "'<'", 
		"'*'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "CARDINALITY_ITEM", "ID", "STRING", 
		"DIVIDER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryBuilderMapping.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryBuilderMappingParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryBuilderMappingParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryBuilderMappingParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public IToken name;
		public IToken descritpion;
		public IToken version;
		public ITerminalNode[] DIVIDER() { return GetTokens(QueryBuilderMappingParser.DIVIDER); }
		public ITerminalNode DIVIDER(int i) {
			return GetToken(QueryBuilderMappingParser.DIVIDER, i);
		}
		public ErmodelContext ermodel() {
			return GetRuleContext<ErmodelContext>(0);
		}
		public MongoschemaContext mongoschema() {
			return GetRuleContext<MongoschemaContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(QueryBuilderMappingParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(QueryBuilderMappingParser.STRING, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(T__0);
			State = 33; Match(T__1);
			State = 34; _localctx.name = Match(STRING);
			State = 35; Match(T__2);
			State = 36; Match(T__1);
			State = 37; _localctx.descritpion = Match(STRING);
			State = 38; Match(T__3);
			State = 39; Match(T__1);
			State = 40; _localctx.version = Match(STRING);
			State = 41; Match(DIVIDER);
			State = 42; Match(T__4);
			State = 43; Match(DIVIDER);
			State = 44; ermodel();
			State = 45; Match(DIVIDER);
			State = 46; Match(T__5);
			State = 47; Match(DIVIDER);
			State = 48; mongoschema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErmodelContext : ParserRuleContext {
		public ErelementContext[] erelement() {
			return GetRuleContexts<ErelementContext>();
		}
		public ErelementContext erelement(int i) {
			return GetRuleContext<ErelementContext>(i);
		}
		public ErmodelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ermodel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterErmodel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitErmodel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErmodel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErmodelContext ermodel() {
		ErmodelContext _localctx = new ErmodelContext(Context, State);
		EnterRule(_localctx, 2, RULE_ermodel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 50; erelement();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErelementContext : ParserRuleContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public RelationshipContext relationship() {
			return GetRuleContext<RelationshipContext>(0);
		}
		public ErelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erelement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterErelement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitErelement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErelement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErelementContext erelement() {
		ErelementContext _localctx = new ErelementContext(Context, State);
		EnterRule(_localctx, 4, RULE_erelement);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; entity();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; relationship();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode ID() { return GetToken(QueryBuilderMappingParser.ID, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 6, RULE_entity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; _localctx.name = Match(ID);
			State = 61; Match(T__6);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11 || _la==ID) {
				{
				{
				State = 62; attribute();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationshipContext : ParserRuleContext {
		public IToken name;
		public RelationshipEndContext[] relationshipEnd() {
			return GetRuleContexts<RelationshipEndContext>();
		}
		public RelationshipEndContext relationshipEnd(int i) {
			return GetRuleContext<RelationshipEndContext>(i);
		}
		public ITerminalNode ID() { return GetToken(QueryBuilderMappingParser.ID, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public RelationshipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationship; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterRelationship(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitRelationship(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationship(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationshipContext relationship() {
		RelationshipContext _localctx = new RelationshipContext(Context, State);
		EnterRule(_localctx, 8, RULE_relationship);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; _localctx.name = Match(ID);
			State = 71; Match(T__8);
			State = 72; relationshipEnd();
			State = 73; Match(T__9);
			State = 74; relationshipEnd();
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 75; Match(T__9);
				State = 76; relationshipEnd();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82; Match(T__10);
			State = 83; Match(T__6);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11 || _la==ID) {
				{
				{
				State = 84; attribute();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationshipEndContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode ID() { return GetToken(QueryBuilderMappingParser.ID, 0); }
		public RelationshipEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationshipEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterRelationshipEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitRelationshipEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationshipEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationshipEndContext relationshipEnd() {
		RelationshipEndContext _localctx = new RelationshipEndContext(Context, State);
		EnterRule(_localctx, 10, RULE_relationshipEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; _localctx.name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken primarykey;
		public IToken name;
		public IToken type;
		public IToken multivalued;
		public ITerminalNode[] ID() { return GetTokens(QueryBuilderMappingParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(QueryBuilderMappingParser.ID, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 94; _localctx.primarykey = Match(T__11);
				}
			}

			State = 97; _localctx.name = Match(ID);
			State = 98; Match(T__1);
			State = 99; _localctx.type = Match(ID);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 100; _localctx.multivalued = Match(T__12);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MongoschemaContext : ParserRuleContext {
		public CollectionContext[] collection() {
			return GetRuleContexts<CollectionContext>();
		}
		public CollectionContext collection(int i) {
			return GetRuleContext<CollectionContext>(i);
		}
		public MongoschemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mongoschema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterMongoschema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitMongoschema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMongoschema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MongoschemaContext mongoschema() {
		MongoschemaContext _localctx = new MongoschemaContext(Context, State);
		EnterRule(_localctx, 14, RULE_mongoschema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 103; collection();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode ID() { return GetToken(QueryBuilderMappingParser.ID, 0); }
		public ErRefsContext erRefs() {
			return GetRuleContext<ErRefsContext>(0);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 16, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; _localctx.name = Match(ID);
			State = 110; Match(T__13);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 111; erRefs();
				}
			}

			State = 114; Match(T__11);
			State = 115; Match(T__6);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 116; field();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErRefsContext : ParserRuleContext {
		public ErRefContext[] erRef() {
			return GetRuleContexts<ErRefContext>();
		}
		public ErRefContext erRef(int i) {
			return GetRuleContext<ErRefContext>(i);
		}
		public ErRefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erRefs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterErRefs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitErRefs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErRefs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErRefsContext erRefs() {
		ErRefsContext _localctx = new ErRefsContext(Context, State);
		EnterRule(_localctx, 18, RULE_erRefs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; erRef();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 125; Match(T__9);
				State = 126; erRef();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErRefContext : ParserRuleContext {
		public IToken refName;
		public IToken main;
		public ITerminalNode ID() { return GetToken(QueryBuilderMappingParser.ID, 0); }
		public ErRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterErRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitErRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErRefContext erRef() {
		ErRefContext _localctx = new ErRefContext(Context, State);
		EnterRule(_localctx, 20, RULE_erRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; _localctx.refName = Match(ID);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 133; _localctx.main = Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public IToken name;
		public FieldTypeContext fieldType() {
			return GetRuleContext<FieldTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(QueryBuilderMappingParser.ID, 0); }
		public ErAttributeRefContext erAttributeRef() {
			return GetRuleContext<ErAttributeRefContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; _localctx.name = Match(ID);
			State = 137; Match(T__1);
			State = 138; fieldType();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 139; erAttributeRef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public FieldTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterFieldType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitFieldType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldTypeContext fieldType() {
		FieldTypeContext _localctx = new FieldTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_fieldType);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142; simpleType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143; complexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public IToken monovaluedType;
		public IToken multivaluedType;
		public ITerminalNode ID() { return GetToken(QueryBuilderMappingParser.ID, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_simpleType);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; _localctx.monovaluedType = Match(ID);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; Match(T__15);
				State = 148; _localctx.multivaluedType = Match(ID);
				State = 149; Match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public FieldContext _field;
		public IList<FieldContext> _monovaluedFields = new List<FieldContext>();
		public IList<FieldContext> _multivaluedFields = new List<FieldContext>();
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_complexType);
		int _la;
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; Match(T__6);
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 153; _localctx._field = field();
					_localctx._monovaluedFields.Add(_localctx._field);
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 159; Match(T__7);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160; Match(T__15);
				State = 161; Match(T__6);
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 162; _localctx._field = field();
					_localctx._multivaluedFields.Add(_localctx._field);
					}
					}
					State = 167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 168; Match(T__7);
				State = 169; Match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErAttributeRefContext : ParserRuleContext {
		public IToken refName;
		public IToken attributeName;
		public ITerminalNode[] ID() { return GetTokens(QueryBuilderMappingParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(QueryBuilderMappingParser.ID, i);
		}
		public ErAttributeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erAttributeRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.EnterErAttributeRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryBuilderMappingListener typedListener = listener as IQueryBuilderMappingListener;
			if (typedListener != null) typedListener.ExitErAttributeRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryBuilderMappingVisitor<TResult> typedVisitor = visitor as IQueryBuilderMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErAttributeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErAttributeRefContext erAttributeRef() {
		ErAttributeRefContext _localctx = new ErAttributeRefContext(Context, State);
		EnterRule(_localctx, 30, RULE_erAttributeRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(T__13);
			State = 173; _localctx.refName = Match(ID);
			State = 174; Match(T__17);
			State = 175; _localctx.attributeName = Match(ID);
			State = 176; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\xB5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\a', '\x3', '\x36', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x39', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '=', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x42', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x45', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'P', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'S', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'X', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '[', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x5', 
		'\b', '\x62', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\t', '\a', '\t', 'k', '\n', 
		'\t', '\f', '\t', '\xE', '\t', 'n', '\v', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', 's', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'x', '\n', '\n', '\f', '\n', '\xE', '\n', '{', '\v', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x82', '\n', '\v', '\f', '\v', '\xE', '\v', '\x85', '\v', 
		'\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x89', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x8F', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x93', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x99', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x9D', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\xA0', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xA6', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\xA9', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xAD', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x2', '\x2', '\x12', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', 
		'\x2', '\x2', '\xB6', '\x2', '\"', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x6', '<', '\x3', '\x2', '\x2', '\x2', 
		'\b', '>', '\x3', '\x2', '\x2', '\x2', '\n', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\f', '^', '\x3', '\x2', '\x2', '\x2', '\xE', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'l', '\x3', '\x2', '\x2', '\x2', '\x12', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '~', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x92', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xAC', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\x3', '\x2', '\x2', 
		'#', '$', '\a', '\x4', '\x2', '\x2', '$', '%', '\a', '\x17', '\x2', '\x2', 
		'%', '&', '\a', '\x5', '\x2', '\x2', '&', '\'', '\a', '\x4', '\x2', '\x2', 
		'\'', '(', '\a', '\x17', '\x2', '\x2', '(', ')', '\a', '\x6', '\x2', '\x2', 
		')', '*', '\a', '\x4', '\x2', '\x2', '*', '+', '\a', '\x17', '\x2', '\x2', 
		'+', ',', '\a', '\x18', '\x2', '\x2', ',', '-', '\a', '\a', '\x2', '\x2', 
		'-', '.', '\a', '\x18', '\x2', '\x2', '.', '/', '\x5', '\x4', '\x3', '\x2', 
		'/', '\x30', '\a', '\x18', '\x2', '\x2', '\x30', '\x31', '\a', '\b', '\x2', 
		'\x2', '\x31', '\x32', '\a', '\x18', '\x2', '\x2', '\x32', '\x33', '\x5', 
		'\x10', '\t', '\x2', '\x33', '\x3', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x36', '\x5', '\x6', '\x4', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x39', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', 
		'\x2', ':', '=', '\x5', '\b', '\x5', '\x2', ';', '=', '\x5', '\n', '\x6', 
		'\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', '\x2', 
		'\x2', '=', '\a', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x16', 
		'\x2', '\x2', '?', '\x43', '\a', '\t', '\x2', '\x2', '@', '\x42', '\x5', 
		'\xE', '\b', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\a', '\n', '\x2', '\x2', 'G', '\t', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\a', '\x16', '\x2', '\x2', 'I', 'J', '\a', '\v', '\x2', '\x2', 'J', 
		'K', '\x5', '\f', '\a', '\x2', 'K', 'L', '\a', '\f', '\x2', '\x2', 'L', 
		'Q', '\x5', '\f', '\a', '\x2', 'M', 'N', '\a', '\f', '\x2', '\x2', 'N', 
		'P', '\x5', '\f', '\a', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 
		'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x3', '\x2', '\x2', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\r', '\x2', '\x2', 
		'U', 'Y', '\a', '\t', '\x2', '\x2', 'V', 'X', '\x5', '\xE', '\b', '\x2', 
		'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\a', '\n', '\x2', '\x2', ']', '\v', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\a', '\x16', '\x2', '\x2', '_', '\r', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x62', '\a', '\xE', '\x2', '\x2', '\x61', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\x16', '\x2', 
		'\x2', '\x64', '\x65', '\a', '\x4', '\x2', '\x2', '\x65', 'g', '\a', '\x16', 
		'\x2', '\x2', '\x66', 'h', '\a', '\xF', '\x2', '\x2', 'g', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x5', '\x12', '\n', '\x2', 'j', 
		'i', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', '\x11', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\a', '\x16', '\x2', '\x2', 'p', 'r', '\a', '\x10', '\x2', 
		'\x2', 'q', 's', '\x5', '\x14', '\v', '\x2', 'r', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\a', '\xE', '\x2', '\x2', 'u', 'y', '\a', '\t', '\x2', 
		'\x2', 'v', 'x', '\x5', '\x18', '\r', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', '{', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\x3', '\x2', '\x2', 
		'\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\n', '\x2', 
		'\x2', '}', '\x13', '\x3', '\x2', '\x2', '\x2', '~', '\x83', '\x5', '\x16', 
		'\f', '\x2', '\x7F', '\x80', '\a', '\f', '\x2', '\x2', '\x80', '\x82', 
		'\x5', '\x16', '\f', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x85', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x88', '\a', '\x16', '\x2', '\x2', '\x87', '\x89', '\a', '\x11', 
		'\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8B', '\a', '\x16', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x4', 
		'\x2', '\x2', '\x8C', '\x8E', '\x5', '\x1A', '\xE', '\x2', '\x8D', '\x8F', 
		'\x5', ' ', '\x11', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x93', '\x5', '\x1C', '\xF', '\x2', '\x91', '\x93', 
		'\x5', '\x1E', '\x10', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x99', '\a', '\x16', '\x2', '\x2', '\x95', '\x96', 
		'\a', '\x12', '\x2', '\x2', '\x96', '\x97', '\a', '\x16', '\x2', '\x2', 
		'\x97', '\x99', '\a', '\x13', '\x2', '\x2', '\x98', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x95', '\x3', '\x2', '\x2', '\x2', '\x99', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9E', '\a', '\t', '\x2', '\x2', 
		'\x9B', '\x9D', '\x5', '\x18', '\r', '\x2', '\x9C', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xAD', '\a', '\n', '\x2', '\x2', '\xA2', '\xA3', 
		'\a', '\x12', '\x2', '\x2', '\xA3', '\xA7', '\a', '\t', '\x2', '\x2', 
		'\xA4', '\xA6', '\x5', '\x18', '\r', '\x2', '\xA5', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAB', '\a', '\n', '\x2', '\x2', '\xAB', '\xAD', 
		'\a', '\x13', '\x2', '\x2', '\xAC', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\a', '\x10', '\x2', '\x2', '\xAF', '\xB0', 
		'\a', '\x16', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x14', '\x2', '\x2', 
		'\xB1', '\xB2', '\a', '\x16', '\x2', '\x2', '\xB2', '\xB3', '\a', '\xE', 
		'\x2', '\x2', '\xB3', '!', '\x3', '\x2', '\x2', '\x2', '\x14', '\x37', 
		'<', '\x43', 'Q', 'Y', '\x61', 'g', 'l', 'r', 'y', '\x83', '\x88', '\x8E', 
		'\x92', '\x98', '\x9E', '\xA7', '\xAC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryBuilder.Parser
